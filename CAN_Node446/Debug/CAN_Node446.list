
CAN_Node446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005cf8  08005cf8  00015cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e64  08005e64  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e6c  08005e6c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000084  08005ef8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08005ef8  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121ff  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f4  00000000  00000000  000322b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023026  00000000  00000000  00036c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131a1  00000000  00000000  00059c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4398  00000000  00000000  0006ce17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001411af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004870  00000000  00000000  00141200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005ce0 	.word	0x08005ce0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08005ce0 	.word	0x08005ce0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b598      	push	{r3, r4, r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fe6e 	bl	80012a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f8c6 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f9cc 	bl	800096c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f9a0 	bl	8000918 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005d8:	f000 f932 	bl	8000840 <MX_CAN1_Init>
  MX_TIM6_Init();
 80005dc:	f000 f966 	bl	80008ac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Send initial message to a serial console.
  for (aux = 0; aux < 5; aux++)
 80005e0:	4b4e      	ldr	r3, [pc, #312]	; (800071c <main+0x158>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e01c      	b.n	8000622 <main+0x5e>
  {
	  HAL_UART_Transmit(&huart2, (uint8_t*)initMsg[aux], strlen(initMsg[aux]), 1000);
 80005e8:	4b4c      	ldr	r3, [pc, #304]	; (800071c <main+0x158>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b4c      	ldr	r3, [pc, #304]	; (8000720 <main+0x15c>)
 80005f0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80005f4:	4b49      	ldr	r3, [pc, #292]	; (800071c <main+0x158>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b49      	ldr	r3, [pc, #292]	; (8000720 <main+0x15c>)
 80005fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fe05 	bl	8000210 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	4621      	mov	r1, r4
 8000610:	4844      	ldr	r0, [pc, #272]	; (8000724 <main+0x160>)
 8000612:	f003 fd60 	bl	80040d6 <HAL_UART_Transmit>
  for (aux = 0; aux < 5; aux++)
 8000616:	4b41      	ldr	r3, [pc, #260]	; (800071c <main+0x158>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <main+0x158>)
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	4b3e      	ldr	r3, [pc, #248]	; (800071c <main+0x158>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d9de      	bls.n	80005e8 <main+0x24>
  }

  // Initialize interrupt reception from console.
  HAL_UART_Receive_IT(&huart2, uRXBuffer, 10);
 800062a:	220a      	movs	r2, #10
 800062c:	493e      	ldr	r1, [pc, #248]	; (8000728 <main+0x164>)
 800062e:	483d      	ldr	r0, [pc, #244]	; (8000724 <main+0x160>)
 8000630:	f003 fe28 	bl	8004284 <HAL_UART_Receive_IT>

  // Load params from flash.
  loadParamFromFlash();
 8000634:	f000 fbd8 	bl	8000de8 <loadParamFromFlash>

  // Initialize timer with interrupts.
  HAL_TIM_Base_Start_IT(&htim6);
 8000638:	483c      	ldr	r0, [pc, #240]	; (800072c <main+0x168>)
 800063a:	f003 fa2f 	bl	8003a9c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Check for received commands from console.
	  switch(state)
 800063e:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <main+0x16c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b09      	cmp	r3, #9
 8000644:	d84a      	bhi.n	80006dc <main+0x118>
 8000646:	a201      	add	r2, pc, #4	; (adr r2, 800064c <main+0x88>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	080006dd 	.word	0x080006dd
 8000650:	08000675 	.word	0x08000675
 8000654:	08000687 	.word	0x08000687
 8000658:	0800068f 	.word	0x0800068f
 800065c:	08000695 	.word	0x08000695
 8000660:	080006dd 	.word	0x080006dd
 8000664:	080006ad 	.word	0x080006ad
 8000668:	080006dd 	.word	0x080006dd
 800066c:	080006bf 	.word	0x080006bf
 8000670:	080006cb 	.word	0x080006cb
	  {
		  case waitCmd:
			  break;

		  case CANListen:
			  CANConfig();
 8000674:	f000 fa8e 	bl	8000b94 <CANConfig>
			  CANSendData = 0;
 8000678:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <main+0x170>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			  state = waitCmd;
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <main+0x16c>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
			  break;
 8000684:	e02b      	b.n	80006de <main+0x11a>

		  case CANStop:
			  CANSendData = 0;
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <main+0x170>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			  break;
 800068c:	e027      	b.n	80006de <main+0x11a>

		  case resetMCU:
			  HAL_NVIC_SystemReset();
 800068e:	f001 fdfa 	bl	8002286 <HAL_NVIC_SystemReset>
			  break;
 8000692:	e024      	b.n	80006de <main+0x11a>

		  case writeFlashBuffer:
			  flashBuffer[uCommand.bufferAddress] = uCommand.data.word;
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <main+0x174>)
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	4619      	mov	r1, r3
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <main+0x174>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	4a27      	ldr	r2, [pc, #156]	; (800073c <main+0x178>)
 80006a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  state = waitCmd;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <main+0x16c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			  break;
 80006aa:	e018      	b.n	80006de <main+0x11a>

		  case readFlashBuffer:
			  break;

		  case writeFlashBufferToFlash:
			  Flash_Write_Data(FLASH_BASE_SECTOR_ADDRESS, flashBuffer, 30);
 80006ac:	221e      	movs	r2, #30
 80006ae:	4923      	ldr	r1, [pc, #140]	; (800073c <main+0x178>)
 80006b0:	4823      	ldr	r0, [pc, #140]	; (8000740 <main+0x17c>)
 80006b2:	f004 fdf9 	bl	80052a8 <Flash_Write_Data>
			  state = waitCmd;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <main+0x16c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
			  break;
 80006bc:	e00f      	b.n	80006de <main+0x11a>

		  case readFlashToFlashBuffer:
			  break;

		  case writeDefaultToFlash:
			  CANFlashDefaults();
 80006be:	f000 fbc7 	bl	8000e50 <CANFlashDefaults>
			  state = waitCmd;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x16c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
			  break;
 80006c8:	e009      	b.n	80006de <main+0x11a>

		  case CANStart:
			  CANConfig();
 80006ca:	f000 fa63 	bl	8000b94 <CANConfig>
			  CANSendData = 1;
 80006ce:	4b19      	ldr	r3, [pc, #100]	; (8000734 <main+0x170>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
			  state = waitCmd;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <main+0x16c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
			  break;
 80006da:	e000      	b.n	80006de <main+0x11a>

		  default:
			  break;
 80006dc:	bf00      	nop
	  }

	  if (CANSendDataFlag && CANSendData)
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <main+0x180>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0aa      	beq.n	800063e <main+0x7a>
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <main+0x170>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0a5      	beq.n	800063e <main+0x7a>
	  {
		  // Put data in buffer to be transmitted.
		  if (HAL_CAN_AddTxMessage(&hcan1, &CANTXHeader, CANTXBuffer, &CANMailbox) != HAL_OK)
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <main+0x184>)
 80006f4:	4a15      	ldr	r2, [pc, #84]	; (800074c <main+0x188>)
 80006f6:	4916      	ldr	r1, [pc, #88]	; (8000750 <main+0x18c>)
 80006f8:	4816      	ldr	r0, [pc, #88]	; (8000754 <main+0x190>)
 80006fa:	f001 f867 	bl	80017cc <HAL_CAN_AddTxMessage>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <main+0x144>
		  {
			  Error_Handler();
 8000704:	f000 fc06 	bl	8000f14 <Error_Handler>
		  }

		  HAL_GPIO_TogglePin(LEDW_GPIO_Port, LEDW_Pin);
 8000708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070c:	4812      	ldr	r0, [pc, #72]	; (8000758 <main+0x194>)
 800070e:	f002 fafe 	bl	8002d0e <HAL_GPIO_TogglePin>

		  // Reset flag.
		  CANSendDataFlag = 0;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <main+0x180>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
	  switch(state)
 8000718:	e791      	b.n	800063e <main+0x7a>
 800071a:	bf00      	nop
 800071c:	200002c0 	.word	0x200002c0
 8000720:	20000000 	.word	0x20000000
 8000724:	20000110 	.word	0x20000110
 8000728:	200002c4 	.word	0x200002c4
 800072c:	200000c8 	.word	0x200000c8
 8000730:	20000240 	.word	0x20000240
 8000734:	200001c6 	.word	0x200001c6
 8000738:	200002d0 	.word	0x200002d0
 800073c:	20000244 	.word	0x20000244
 8000740:	08060000 	.word	0x08060000
 8000744:	200001c4 	.word	0x200001c4
 8000748:	200001c0 	.word	0x200001c0
 800074c:	200001b0 	.word	0x200001b0
 8000750:	2000017c 	.word	0x2000017c
 8000754:	200000a0 	.word	0x200000a0
 8000758:	40020400 	.word	0x40020400

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2234      	movs	r2, #52	; 0x34
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f004 fe42 	bl	80053f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <SystemClock_Config+0xdc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <SystemClock_Config+0xdc>)
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <SystemClock_Config+0xdc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <SystemClock_Config+0xe0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <SystemClock_Config+0xe0>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemClock_Config+0xe0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007d0:	23b4      	movs	r3, #180	; 0xb4
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fe6b 	bl	80034c0 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f0:	f000 fb90 	bl	8000f14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f4:	f002 faca 	bl	8002d8c <HAL_PWREx_EnableOverDrive>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fe:	f000 fb89 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	2105      	movs	r1, #5
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fb03 	bl	8002e2c <HAL_RCC_ClockConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800082c:	f000 fb72 	bl	8000f14 <Error_Handler>
  }
}
 8000830:	bf00      	nop
 8000832:	3750      	adds	r7, #80	; 0x50
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_CAN1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 36;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_CAN1_Init+0x64>)
 800084c:	2224      	movs	r2, #36	; 0x24
 800084e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_CAN1_Init+0x64>)
 800085e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000866:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800086a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_CAN1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_CAN1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_CAN1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000892:	f000 fd7b 	bl	800138c <HAL_CAN_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 fb3a 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000a0 	.word	0x200000a0
 80008a8:	40006400 	.word	0x40006400

080008ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_TIM6_Init+0x64>)
 80008bc:	4a15      	ldr	r2, [pc, #84]	; (8000914 <MX_TIM6_Init+0x68>)
 80008be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 900;
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_TIM6_Init+0x64>)
 80008c2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80008c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_TIM6_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_TIM6_Init+0x64>)
 80008d0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_TIM6_Init+0x64>)
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <MX_TIM6_Init+0x64>)
 80008de:	f003 f88d 	bl	80039fc <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80008e8:	f000 fb14 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_TIM6_Init+0x64>)
 80008fa:	f003 fb0f 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000904:	f000 fb06 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000c8 	.word	0x200000c8
 8000914:	40001000 	.word	0x40001000

08000918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART2_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000950:	f003 fb74 	bl	800403c <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 fadb 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000110 	.word	0x20000110
 8000968:	40004400 	.word	0x40004400

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <MX_GPIO_Init+0x10c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <MX_GPIO_Init+0x10c>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <MX_GPIO_Init+0x10c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a34      	ldr	r2, [pc, #208]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <MX_GPIO_Init+0x10c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4821      	ldr	r0, [pc, #132]	; (8000a7c <MX_GPIO_Init+0x110>)
 80009f8:	f002 f970 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDY_Pin|LEDW_Pin|LEDB_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <MX_GPIO_Init+0x114>)
 8000a04:	f002 f96a 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4819      	ldr	r0, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x118>)
 8000a20:	f001 ffc8 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a24:	2320      	movs	r3, #32
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4810      	ldr	r0, [pc, #64]	; (8000a7c <MX_GPIO_Init+0x110>)
 8000a3c:	f001 ffba 	bl	80029b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDY_Pin LEDW_Pin LEDB_Pin */
  GPIO_InitStruct.Pin = LEDY_Pin|LEDW_Pin|LEDB_Pin;
 8000a40:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <MX_GPIO_Init+0x114>)
 8000a5a:	f001 ffab 	bl	80029b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 14, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	210e      	movs	r1, #14
 8000a62:	2028      	movs	r0, #40	; 0x28
 8000a64:	f001 fbe5 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a68:	2028      	movs	r0, #40	; 0x28
 8000a6a:	f001 fbfe 	bl	800226a <HAL_NVIC_EnableIRQ>

}
 8000a6e:	bf00      	nop
 8000a70:	3728      	adds	r7, #40	; 0x28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40020800 	.word	0x40020800

08000a88 <CANFilterConfiguration>:

/* USER CODE BEGIN 4 */
void CANFilterConfiguration(CAN_FilterTypeDef *_CANFilter)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	// Initialize filters.
	if (HAL_CAN_ConfigFilter(&hcan1, _CANFilter) != HAL_OK)
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <CANFilterConfiguration+0x24>)
 8000a94:	f000 fd76 	bl	8001584 <HAL_CAN_ConfigFilter>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <CANFilterConfiguration+0x1a>
	{
		Error_Handler();
 8000a9e:	f000 fa39 	bl	8000f14 <Error_Handler>
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000a0 	.word	0x200000a0

08000ab0 <CANInit>:

void CANInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8000ab4:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <CANInit+0xd4>)
 8000ab6:	4a34      	ldr	r2, [pc, #208]	; (8000b88 <CANInit+0xd8>)
 8000ab8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = CANParamemeters[29];
 8000aba:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <CANInit+0xdc>)
 8000abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <CANInit+0xd4>)
 8000ac0:	6053      	str	r3, [r2, #4]
	hcan1.Init.Mode = CANParamemeters[1];
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <CANInit+0xdc>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <CANInit+0xd4>)
 8000ac8:	6093      	str	r3, [r2, #8]
	hcan1.Init.SyncJumpWidth = CANParamemeters[2];
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <CANInit+0xdc>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <CANInit+0xd4>)
 8000ad0:	60d3      	str	r3, [r2, #12]
	hcan1.Init.TimeSeg1 = CANParamemeters[3];
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <CANInit+0xdc>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	4a2b      	ldr	r2, [pc, #172]	; (8000b84 <CANInit+0xd4>)
 8000ad8:	6113      	str	r3, [r2, #16]
	hcan1.Init.TimeSeg2 = CANParamemeters[4];
 8000ada:	4b2c      	ldr	r3, [pc, #176]	; (8000b8c <CANInit+0xdc>)
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <CANInit+0xd4>)
 8000ae0:	6153      	str	r3, [r2, #20]
	hcan1.Init.TimeTriggeredMode = CANParamemeters[5];
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <CANInit+0xdc>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <CANInit+0xd4>)
 8000aea:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = CANParamemeters[6];
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <CANInit+0xdc>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <CANInit+0xd4>)
 8000af4:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = CANParamemeters[7];
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <CANInit+0xdc>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <CANInit+0xd4>)
 8000afe:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = CANParamemeters[8];
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <CANInit+0xdc>)
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <CANInit+0xd4>)
 8000b08:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = CANParamemeters[9];
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <CANInit+0xdc>)
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <CANInit+0xd4>)
 8000b12:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = CANParamemeters[10];
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <CANInit+0xdc>)
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <CANInit+0xd4>)
 8000b1c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b1e:	4819      	ldr	r0, [pc, #100]	; (8000b84 <CANInit+0xd4>)
 8000b20:	f000 fc34 	bl	800138c <HAL_CAN_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <CANInit+0x7e>
	{
		Error_Handler();
 8000b2a:	f000 f9f3 	bl	8000f14 <Error_Handler>
	}

	CANFilter.FilterActivation = CANParamemeters[11];
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <CANInit+0xdc>)
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	4a17      	ldr	r2, [pc, #92]	; (8000b90 <CANInit+0xe0>)
 8000b34:	6213      	str	r3, [r2, #32]
	CANFilter.FilterBank = CANParamemeters[12];
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <CANInit+0xdc>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <CANInit+0xe0>)
 8000b3c:	6153      	str	r3, [r2, #20]
	CANFilter.FilterFIFOAssignment = CANParamemeters[13];
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <CANInit+0xdc>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <CANInit+0xe0>)
 8000b44:	6113      	str	r3, [r2, #16]
	CANFilter.FilterIdHigh = CANParamemeters[14];
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <CANInit+0xdc>)
 8000b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b4a:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <CANInit+0xe0>)
 8000b4c:	6013      	str	r3, [r2, #0]
	CANFilter.FilterIdLow = CANParamemeters[15];
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <CANInit+0xdc>)
 8000b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <CANInit+0xe0>)
 8000b54:	6053      	str	r3, [r2, #4]
	CANFilter.FilterMaskIdHigh = CANParamemeters[16];
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <CANInit+0xdc>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <CANInit+0xe0>)
 8000b5c:	6093      	str	r3, [r2, #8]
	CANFilter.FilterMaskIdLow = CANParamemeters[17];
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <CANInit+0xdc>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <CANInit+0xe0>)
 8000b64:	60d3      	str	r3, [r2, #12]
	CANFilter.FilterMode = CANParamemeters[18];
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <CANInit+0xdc>)
 8000b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6a:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <CANInit+0xe0>)
 8000b6c:	6193      	str	r3, [r2, #24]
	CANFilter.FilterScale = CANParamemeters[19];
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <CANInit+0xdc>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <CANInit+0xe0>)
 8000b74:	61d3      	str	r3, [r2, #28]
	CANFilter.SlaveStartFilterBank = CANParamemeters[20];
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <CANInit+0xdc>)
 8000b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <CANInit+0xe0>)
 8000b7c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000a0 	.word	0x200000a0
 8000b88:	40006400 	.word	0x40006400
 8000b8c:	200001c8 	.word	0x200001c8
 8000b90:	20000154 	.word	0x20000154

08000b94 <CANConfig>:
void CANConfig(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	CANInit();
 8000b98:	f7ff ff8a 	bl	8000ab0 <CANInit>

	// Initialize Filters.
	CANFilterConfiguration(&CANFilter);
 8000b9c:	4822      	ldr	r0, [pc, #136]	; (8000c28 <CANConfig+0x94>)
 8000b9e:	f7ff ff73 	bl	8000a88 <CANFilterConfiguration>

	isCANConfig = 1;
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <CANConfig+0x98>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]

	// Start CAN module.
	HAL_CAN_Start(&hcan1);
 8000ba8:	4821      	ldr	r0, [pc, #132]	; (8000c30 <CANConfig+0x9c>)
 8000baa:	f000 fdcb 	bl	8001744 <HAL_CAN_Start>

	// Activate interrupt mask.
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bae:	2102      	movs	r1, #2
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <CANConfig+0x9c>)
 8000bb2:	f000 fff8 	bl	8001ba6 <HAL_CAN_ActivateNotification>

	CANTXHeader.DLC = CANParamemeters[21];
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <CANConfig+0xa0>)
 8000bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <CANConfig+0xa4>)
 8000bbc:	6113      	str	r3, [r2, #16]
	CANTXHeader.ExtId = CANParamemeters[22];
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <CANConfig+0xa0>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <CANConfig+0xa4>)
 8000bc4:	6053      	str	r3, [r2, #4]
	CANTXHeader.IDE = CANParamemeters[23];
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <CANConfig+0xa0>)
 8000bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bca:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <CANConfig+0xa4>)
 8000bcc:	6093      	str	r3, [r2, #8]
	CANTXHeader.RTR = CANParamemeters[24];
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <CANConfig+0xa0>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <CANConfig+0xa4>)
 8000bd4:	60d3      	str	r3, [r2, #12]
	CANTXHeader.StdId = CANParamemeters[25];
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <CANConfig+0xa0>)
 8000bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <CANConfig+0xa4>)
 8000bdc:	6013      	str	r3, [r2, #0]
	CANTXHeader.TransmitGlobalTime = CANParamemeters[26];
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <CANConfig+0xa0>)
 8000be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <CANConfig+0xa4>)
 8000be6:	751a      	strb	r2, [r3, #20]

	CANTXBuffer[0] = 'C';
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <CANConfig+0xa8>)
 8000bea:	2243      	movs	r2, #67	; 0x43
 8000bec:	701a      	strb	r2, [r3, #0]
	CANTXBuffer[1] = 'A';
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <CANConfig+0xa8>)
 8000bf0:	2241      	movs	r2, #65	; 0x41
 8000bf2:	705a      	strb	r2, [r3, #1]
	CANTXBuffer[2] = 'N';
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <CANConfig+0xa8>)
 8000bf6:	224e      	movs	r2, #78	; 0x4e
 8000bf8:	709a      	strb	r2, [r3, #2]
	CANTXBuffer[3] = ' ';
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <CANConfig+0xa8>)
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	70da      	strb	r2, [r3, #3]
	CANTXBuffer[4] = 'I';
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <CANConfig+0xa8>)
 8000c02:	2249      	movs	r2, #73	; 0x49
 8000c04:	711a      	strb	r2, [r3, #4]
	CANTXBuffer[5] = 'n';
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <CANConfig+0xa8>)
 8000c08:	226e      	movs	r2, #110	; 0x6e
 8000c0a:	715a      	strb	r2, [r3, #5]
	CANTXBuffer[6] = 'i';
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <CANConfig+0xa8>)
 8000c0e:	2269      	movs	r2, #105	; 0x69
 8000c10:	719a      	strb	r2, [r3, #6]
	CANTXBuffer[7] = 't';
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <CANConfig+0xa8>)
 8000c14:	2274      	movs	r2, #116	; 0x74
 8000c16:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan1, &CANTXHeader, CANTXBuffer, &CANMailbox);
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <CANConfig+0xac>)
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <CANConfig+0xa8>)
 8000c1c:	4906      	ldr	r1, [pc, #24]	; (8000c38 <CANConfig+0xa4>)
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <CANConfig+0x9c>)
 8000c20:	f000 fdd4 	bl	80017cc <HAL_CAN_AddTxMessage>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000154 	.word	0x20000154
 8000c2c:	200001c5 	.word	0x200001c5
 8000c30:	200000a0 	.word	0x200000a0
 8000c34:	200001c8 	.word	0x200001c8
 8000c38:	2000017c 	.word	0x2000017c
 8000c3c:	200001b0 	.word	0x200001b0
 8000c40:	200001c0 	.word	0x200001c0

08000c44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LEDY_GPIO_Port, LEDY_Pin);
 8000c4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c52:	f002 f85c 	bl	8002d0e <HAL_GPIO_TogglePin>

	counter++;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c5e:	6013      	str	r3, [r2, #0]
	if (counter >= 6)
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d905      	bls.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
//		CANInitFlag = 1;
		CANSendDataFlag = 1;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
	}
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	200002bc 	.word	0x200002bc
 8000c84:	200001c4 	.word	0x200001c4

08000c88 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b095      	sub	sp, #84	; 0x54
 8000c8c:	af08      	add	r7, sp, #32
 8000c8e:	60f8      	str	r0, [r7, #12]
	char msg[30];

	HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 8000c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000c96:	f002 f83a 	bl	8002d0e <HAL_GPIO_TogglePin>

	if (HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &CANRXHeader, CANRXBuffer))
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	68f8      	ldr	r0, [r7, #12]
 8000ca2:	f000 fe6e 	bl	8001982 <HAL_CAN_GetRxMessage>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
	{
		Error_Handler();
 8000cac:	f000 f932 	bl	8000f14 <Error_Handler>
	}

	sprintf(
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
			msg,
			"NodeID: %x  %x %x %x %x %x %x %x %x\r\n",
			CANRXHeader.StdId,
			CANRXBuffer[0],
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
	sprintf(
 8000cb8:	469c      	mov	ip, r3
			CANRXBuffer[1],
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cbc:	785b      	ldrb	r3, [r3, #1]
	sprintf(
 8000cbe:	4619      	mov	r1, r3
			CANRXBuffer[2],
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cc2:	789b      	ldrb	r3, [r3, #2]
	sprintf(
 8000cc4:	461c      	mov	r4, r3
			CANRXBuffer[3],
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cc8:	78db      	ldrb	r3, [r3, #3]
	sprintf(
 8000cca:	461d      	mov	r5, r3
			CANRXBuffer[4],
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cce:	791b      	ldrb	r3, [r3, #4]
	sprintf(
 8000cd0:	461e      	mov	r6, r3
			CANRXBuffer[5],
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cd4:	795b      	ldrb	r3, [r3, #5]
	sprintf(
 8000cd6:	60bb      	str	r3, [r7, #8]
			CANRXBuffer[6],
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000cda:	799b      	ldrb	r3, [r3, #6]
	sprintf(
 8000cdc:	607b      	str	r3, [r7, #4]
			CANRXBuffer[7]
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8000ce0:	79db      	ldrb	r3, [r3, #7]
	sprintf(
 8000ce2:	f107 0010 	add.w	r0, r7, #16
 8000ce6:	9306      	str	r3, [sp, #24]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	9304      	str	r3, [sp, #16]
 8000cf0:	9603      	str	r6, [sp, #12]
 8000cf2:	9502      	str	r5, [sp, #8]
 8000cf4:	9401      	str	r4, [sp, #4]
 8000cf6:	9100      	str	r1, [sp, #0]
 8000cf8:	4663      	mov	r3, ip
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000cfc:	f004 fb82 	bl	8005404 <siprintf>
			);

//	sprintf(msg, "Data received...\r\n");

	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fa83 	bl	8000210 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f107 0110 	add.w	r1, r7, #16
 8000d12:	2364      	movs	r3, #100	; 0x64
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000d16:	f003 f9de 	bl	80040d6 <HAL_UART_Transmit>
}
 8000d1a:	bf00      	nop
 8000d1c:	3734      	adds	r7, #52	; 0x34
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40020400 	.word	0x40020400
 8000d28:	200001b8 	.word	0x200001b8
 8000d2c:	20000194 	.word	0x20000194
 8000d30:	08005dd8 	.word	0x08005dd8
 8000d34:	20000110 	.word	0x20000110

08000d38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_UART_RxCpltCallback+0x9c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d140      	bne.n	8000dcc <HAL_UART_RxCpltCallback+0x94>
	{
		// Transmit data received for verification.
		HAL_UART_Transmit_IT(huart, uRXBuffer, 10);
 8000d4a:	220a      	movs	r2, #10
 8000d4c:	4922      	ldr	r1, [pc, #136]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f003 fa53 	bl	80041fa <HAL_UART_Transmit_IT>

		// Transfer data received to command structure.
		uCommand.startFrame = uRXBuffer[0];
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d5a:	701a      	strb	r2, [r3, #0]
		uCommand.actionCode = uRXBuffer[1];
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d5e:	785a      	ldrb	r2, [r3, #1]
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d62:	705a      	strb	r2, [r3, #1]
		uCommand.bufferAddress = uRXBuffer[2];
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d66:	789a      	ldrb	r2, [r3, #2]
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d6a:	709a      	strb	r2, [r3, #2]
		uCommand.data.byte[0] = uRXBuffer[3];
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d6e:	78da      	ldrb	r2, [r3, #3]
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d72:	711a      	strb	r2, [r3, #4]
		uCommand.data.byte[1] = uRXBuffer[4];
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d76:	791a      	ldrb	r2, [r3, #4]
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d7a:	715a      	strb	r2, [r3, #5]
		uCommand.data.byte[2] = uRXBuffer[5];
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d7e:	795a      	ldrb	r2, [r3, #5]
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d82:	719a      	strb	r2, [r3, #6]
		uCommand.data.byte[3] = uRXBuffer[6];
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d86:	799a      	ldrb	r2, [r3, #6]
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d8a:	71da      	strb	r2, [r3, #7]
		uCommand.errorCheck.byte[0] = uRXBuffer[7];
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d8e:	79da      	ldrb	r2, [r3, #7]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d92:	721a      	strb	r2, [r3, #8]
		uCommand.errorCheck.byte[1] = uRXBuffer[8];
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d96:	7a1a      	ldrb	r2, [r3, #8]
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000d9a:	725a      	strb	r2, [r3, #9]
		uCommand.endFrame = uRXBuffer[9];
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000d9e:	7a5a      	ldrb	r2, [r3, #9]
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000da2:	729a      	strb	r2, [r3, #10]

		// Verify start and end frame to continue.
		if (uCommand.startFrame == START_FRAME && uCommand.endFrame == END_FRAME)
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b4a      	cmp	r3, #74	; 0x4a
 8000daa:	d107      	bne.n	8000dbc <HAL_UART_RxCpltCallback+0x84>
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000dae:	7a9b      	ldrb	r3, [r3, #10]
 8000db0:	2b56      	cmp	r3, #86	; 0x56
 8000db2:	d103      	bne.n	8000dbc <HAL_UART_RxCpltCallback+0x84>
		{
		  state = uCommand.actionCode;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_UART_RxCpltCallback+0xa4>)
 8000db6:	785a      	ldrb	r2, [r3, #1]
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_UART_RxCpltCallback+0xa8>)
 8000dba:	701a      	strb	r2, [r3, #0]
		}

		// Receive command flag set.
		cmdReceivedFlag = 1;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_UART_RxCpltCallback+0xac>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]

		// Enable UART reception using interrupts.
		HAL_UART_Receive_IT(huart, uRXBuffer, 10);
 8000dc2:	220a      	movs	r2, #10
 8000dc4:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f003 fa5c 	bl	8004284 <HAL_UART_Receive_IT>
	}
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	200002c4 	.word	0x200002c4
 8000ddc:	200002d0 	.word	0x200002d0
 8000de0:	20000240 	.word	0x20000240
 8000de4:	200002ce 	.word	0x200002ce

08000de8 <loadParamFromFlash>:

void loadParamFromFlash(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
	char *msgOK = "Parameters loaded OK\r\n";
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <loadParamFromFlash+0x54>)
 8000df0:	603b      	str	r3, [r7, #0]

	Flash_Read_Data(FLASH_BASE_SECTOR_ADDRESS, flashBuffer, 30);
 8000df2:	221e      	movs	r2, #30
 8000df4:	4912      	ldr	r1, [pc, #72]	; (8000e40 <loadParamFromFlash+0x58>)
 8000df6:	4813      	ldr	r0, [pc, #76]	; (8000e44 <loadParamFromFlash+0x5c>)
 8000df8:	f004 fab4 	bl	8005364 <Flash_Read_Data>

	for (uint8_t i = 0; i < 30; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	e00a      	b.n	8000e18 <loadParamFromFlash+0x30>
	{
		CANParamemeters[i] = flashBuffer[i];
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	490e      	ldr	r1, [pc, #56]	; (8000e40 <loadParamFromFlash+0x58>)
 8000e08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e0c:	490e      	ldr	r1, [pc, #56]	; (8000e48 <loadParamFromFlash+0x60>)
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t i = 0; i < 30; i++)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	3301      	adds	r3, #1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	2b1d      	cmp	r3, #29
 8000e1c:	d9f1      	bls.n	8000e02 <loadParamFromFlash+0x1a>
//		writeFlashBuffer[i] = readFlashBuffer[i];
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)msgOK, strlen(msgOK), 100);
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f7ff f9f6 	bl	8000210 <strlen>
 8000e24:	4603      	mov	r3, r0
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	2364      	movs	r3, #100	; 0x64
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <loadParamFromFlash+0x64>)
 8000e2e:	f003 f952 	bl	80040d6 <HAL_UART_Transmit>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08005e00 	.word	0x08005e00
 8000e40:	20000244 	.word	0x20000244
 8000e44:	08060000 	.word	0x08060000
 8000e48:	200001c8 	.word	0x200001c8
 8000e4c:	20000110 	.word	0x20000110

08000e50 <CANFlashDefaults>:

void CANFlashDefaults(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	flashBuffer[29] = 36;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e56:	2224      	movs	r2, #36	; 0x24
 8000e58:	675a      	str	r2, [r3, #116]	; 0x74
	flashBuffer[1] = CAN_MODE_LOOPBACK;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	605a      	str	r2, [r3, #4]
	flashBuffer[2] = CAN_SJW_1TQ;
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
	flashBuffer[3] = CAN_BS1_16TQ;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e6a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000e6e:	60da      	str	r2, [r3, #12]
	flashBuffer[4] = CAN_BS2_8TQ;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e72:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000e76:	611a      	str	r2, [r3, #16]
	flashBuffer[5] = DISABLE;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
	flashBuffer[6] = DISABLE;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
	flashBuffer[7] = DISABLE;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
	flashBuffer[8] = DISABLE;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
	flashBuffer[9] = DISABLE;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
	flashBuffer[10] = DISABLE;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28

	/*
	 * This group of parameters correspond to the CAN filter structure.
	 */
	flashBuffer[11] = CAN_FILTER_ENABLE;			// FilterActivation
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
	flashBuffer[12] = 0;							// FilterBank
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
	flashBuffer[13] = CAN_FILTER_FIFO0;				// FilterFIFOAssignment
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
	flashBuffer[14] = 0x0;							// FilterIdHigh
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
	flashBuffer[15] = 0x0;							// FilterIdLow
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	63da      	str	r2, [r3, #60]	; 0x3c
	flashBuffer[16] = 0x0;							// FilterMaskIdHigh
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
	flashBuffer[17] = 0x0;							// FilterMaskIdLow
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	645a      	str	r2, [r3, #68]	; 0x44
	flashBuffer[18] = CAN_FILTERMODE_IDMASK;		// FilterMode
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	649a      	str	r2, [r3, #72]	; 0x48
	flashBuffer[19] = CAN_FILTERSCALE_32BIT;		// FilterScale
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	64da      	str	r2, [r3, #76]	; 0x4c
	flashBuffer[20] = 13;							// SlaveStartFilterBank
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ed4:	220d      	movs	r2, #13
 8000ed6:	651a      	str	r2, [r3, #80]	; 0x50

	flashBuffer[21] = 8;							// DLC
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000eda:	2208      	movs	r2, #8
 8000edc:	655a      	str	r2, [r3, #84]	; 0x54
	flashBuffer[22] = 0;							// ExtId
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	659a      	str	r2, [r3, #88]	; 0x58
	flashBuffer[23] = CAN_ID_STD;					// IDE
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	65da      	str	r2, [r3, #92]	; 0x5c
	flashBuffer[24] = CAN_RTR_DATA;					// RTR
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	661a      	str	r2, [r3, #96]	; 0x60
	flashBuffer[25] = 0x446;						// StdId
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000ef2:	f240 4246 	movw	r2, #1094	; 0x446
 8000ef6:	665a      	str	r2, [r3, #100]	; 0x64
	flashBuffer[26] = DISABLE;						// TransmitGlobalTime
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	669a      	str	r2, [r3, #104]	; 0x68

  Flash_Write_Data((FLASH_BASE_SECTOR_ADDRESS), flashBuffer, 30);
 8000efe:	221e      	movs	r2, #30
 8000f00:	4902      	ldr	r1, [pc, #8]	; (8000f0c <CANFlashDefaults+0xbc>)
 8000f02:	4803      	ldr	r0, [pc, #12]	; (8000f10 <CANFlashDefaults+0xc0>)
 8000f04:	f004 f9d0 	bl	80052a8 <Flash_Write_Data>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000244 	.word	0x20000244
 8000f10:	08060000 	.word	0x08060000

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <HAL_CAN_MspInit+0xa4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d13c      	bne.n	800100c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_CAN_MspInit+0xa8>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <HAL_CAN_MspInit+0xa8>)
 8000f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_CAN_MspInit+0xa8>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_CAN_MspInit+0xa8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <HAL_CAN_MspInit+0xa8>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_CAN_MspInit+0xa8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fdc:	2309      	movs	r3, #9
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <HAL_CAN_MspInit+0xac>)
 8000fe8:	f001 fce4 	bl	80029b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 11, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	210b      	movs	r1, #11
 8000ff0:	2014      	movs	r0, #20
 8000ff2:	f001 f91e 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f001 f937 	bl	800226a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 11, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	210b      	movs	r1, #11
 8001000:	2015      	movs	r0, #21
 8001002:	f001 f916 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001006:	2015      	movs	r0, #21
 8001008:	f001 f92f 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40006400 	.word	0x40006400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_TIM_Base_MspInit+0x48>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d115      	bne.n	800105e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_TIM_Base_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <HAL_TIM_Base_MspInit+0x4c>)
 800103c:	f043 0310 	orr.w	r3, r3, #16
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_Base_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0310 	and.w	r3, r3, #16
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 14, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	210e      	movs	r1, #14
 8001052:	2036      	movs	r0, #54	; 0x36
 8001054:	f001 f8ed 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001058:	2036      	movs	r0, #54	; 0x36
 800105a:	f001 f906 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40001000 	.word	0x40001000
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <HAL_UART_MspInit+0x94>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d133      	bne.n	80010fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_UART_MspInit+0x98>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <HAL_UART_MspInit+0x98>)
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_UART_MspInit+0x98>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_UART_MspInit+0x98>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <HAL_UART_MspInit+0x98>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_UART_MspInit+0x98>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ca:	230c      	movs	r3, #12
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010da:	2307      	movs	r3, #7
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_UART_MspInit+0x9c>)
 80010e6:	f001 fc65 	bl	80029b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 10, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	210a      	movs	r1, #10
 80010ee:	2026      	movs	r0, #38	; 0x26
 80010f0:	f001 f89f 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f4:	2026      	movs	r0, #38	; 0x26
 80010f6:	f001 f8b8 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40004400 	.word	0x40004400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f8f6 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <CAN1_RX0_IRQHandler+0x10>)
 800116a:	f000 fd42 	bl	8001bf2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200000a0 	.word	0x200000a0

08001178 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <CAN1_RX1_IRQHandler+0x10>)
 800117e:	f000 fd38 	bl	8001bf2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000a0 	.word	0x200000a0

0800118c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <USART2_IRQHandler+0x10>)
 8001192:	f003 f8a7 	bl	80042e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000110 	.word	0x20000110

080011a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a8:	f001 fdcc 	bl	8002d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM6_DAC_IRQHandler+0x10>)
 80011b6:	f002 fce1 	bl	8003b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000c8 	.word	0x200000c8

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f004 f8d4 	bl	80053a0 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20020000 	.word	0x20020000
 8001224:	00000400 	.word	0x00000400
 8001228:	200002dc 	.word	0x200002dc
 800122c:	20000328 	.word	0x20000328

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	; (80012a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800127e:	f7ff ffd7 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f004 f893 	bl	80053ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff f99d 	bl	80005c4 <main>
  bx  lr    
 800128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001298:	08005e74 	.word	0x08005e74
  ldr r2, =_sbss
 800129c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80012a0:	20000328 	.word	0x20000328

080012a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_Init+0x40>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x40>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x40>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 ffa3 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fe20 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 ffbf 	bl	800228e <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 ff83 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000014 	.word	0x20000014
 8001344:	2000001c 	.word	0x2000001c
 8001348:	20000018 	.word	0x20000018

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000001c 	.word	0x2000001c
 8001370:	200002e0 	.word	0x200002e0

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200002e0 	.word	0x200002e0

0800138c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0ed      	b.n	800157a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fde0 	bl	8000f70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c0:	f7ff ffd8 	bl	8001374 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013c6:	e012      	b.n	80013ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c8:	f7ff ffd4 	bl	8001374 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b0a      	cmp	r3, #10
 80013d4:	d90b      	bls.n	80013ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2205      	movs	r2, #5
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0c5      	b.n	800157a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0e5      	beq.n	80013c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0202 	bic.w	r2, r2, #2
 800140a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800140c:	f7ff ffb2 	bl	8001374 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001412:	e012      	b.n	800143a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001414:	f7ff ffae 	bl	8001374 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b0a      	cmp	r3, #10
 8001420:	d90b      	bls.n	800143a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2205      	movs	r2, #5
 8001432:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e09f      	b.n	800157a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e5      	bne.n	8001414 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7e1b      	ldrb	r3, [r3, #24]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d108      	bne.n	8001462 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e007      	b.n	8001472 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001470:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7e5b      	ldrb	r3, [r3, #25]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d108      	bne.n	800148c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e007      	b.n	800149c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800149a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7e9b      	ldrb	r3, [r3, #26]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d108      	bne.n	80014b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0220 	orr.w	r2, r2, #32
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e007      	b.n	80014c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0220 	bic.w	r2, r2, #32
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7edb      	ldrb	r3, [r3, #27]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d108      	bne.n	80014e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0210 	bic.w	r2, r2, #16
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	e007      	b.n	80014f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0210 	orr.w	r2, r2, #16
 80014ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7f1b      	ldrb	r3, [r3, #28]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0208 	orr.w	r2, r2, #8
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e007      	b.n	800151a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0208 	bic.w	r2, r2, #8
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7f5b      	ldrb	r3, [r3, #29]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0204 	orr.w	r2, r2, #4
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e007      	b.n	8001544 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0204 	bic.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	ea42 0103 	orr.w	r1, r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800159c:	7cfb      	ldrb	r3, [r7, #19]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d003      	beq.n	80015aa <HAL_CAN_ConfigFilter+0x26>
 80015a2:	7cfb      	ldrb	r3, [r7, #19]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	f040 80be 	bne.w	8001726 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_CAN_ConfigFilter+0x1bc>)
 80015ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	431a      	orrs	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	2201      	movs	r2, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	401a      	ands	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d123      	bne.n	8001654 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800162e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3248      	adds	r2, #72	; 0x48
 8001634:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001648:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	3348      	adds	r3, #72	; 0x48
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d122      	bne.n	80016a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800167c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3248      	adds	r2, #72	; 0x48
 8001682:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001696:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001698:	6979      	ldr	r1, [r7, #20]
 800169a:	3348      	adds	r3, #72	; 0x48
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	401a      	ands	r2, r3
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016bc:	e007      	b.n	80016ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	401a      	ands	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80016e8:	e007      	b.n	80016fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d107      	bne.n	8001712 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	431a      	orrs	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001718:	f023 0201 	bic.w	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e006      	b.n	8001734 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
  }
}
 8001734:	4618      	mov	r0, r3
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40006400 	.word	0x40006400

08001744 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d12e      	bne.n	80017b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff fe00 	bl	8001374 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001776:	e012      	b.n	800179e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001778:	f7ff fdfc 	bl	8001374 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b0a      	cmp	r3, #10
 8001784:	d90b      	bls.n	800179e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2205      	movs	r2, #5
 8001796:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e012      	b.n	80017c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e5      	bne.n	8001778 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e006      	b.n	80017c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
  }
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017ea:	7ffb      	ldrb	r3, [r7, #31]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d003      	beq.n	80017f8 <HAL_CAN_AddTxMessage+0x2c>
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	f040 80b8 	bne.w	8001968 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a0 	beq.w	8001958 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	0e1b      	lsrs	r3, r3, #24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b02      	cmp	r3, #2
 8001826:	d907      	bls.n	8001838 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e09e      	b.n	8001976 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001838:	2201      	movs	r2, #1
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	409a      	lsls	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	6809      	ldr	r1, [r1, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3318      	adds	r3, #24
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e00f      	b.n	8001886 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001870:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800187a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3318      	adds	r3, #24
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	440b      	add	r3, r1
 8001884:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3318      	adds	r3, #24
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	440b      	add	r3, r1
 8001896:	3304      	adds	r3, #4
 8001898:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	7d1b      	ldrb	r3, [r3, #20]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d111      	bne.n	80018c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3318      	adds	r3, #24
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	6811      	ldr	r1, [r2, #0]
 80018b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	3318      	adds	r3, #24
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	440b      	add	r3, r1
 80018c2:	3304      	adds	r3, #4
 80018c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3307      	adds	r3, #7
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	061a      	lsls	r2, r3, #24
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3306      	adds	r3, #6
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3305      	adds	r3, #5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	4313      	orrs	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	3204      	adds	r2, #4
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4610      	mov	r0, r2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	6811      	ldr	r1, [r2, #0]
 80018ee:	ea43 0200 	orr.w	r2, r3, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	440b      	add	r3, r1
 80018f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80018fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3303      	adds	r3, #3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	061a      	lsls	r2, r3, #24
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3302      	adds	r3, #2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	041b      	lsls	r3, r3, #16
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3301      	adds	r3, #1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	4313      	orrs	r3, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4610      	mov	r0, r2
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	6811      	ldr	r1, [r2, #0]
 8001924:	ea43 0200 	orr.w	r2, r3, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	440b      	add	r3, r1
 800192e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001932:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3318      	adds	r3, #24
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	4413      	add	r3, r2
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	6811      	ldr	r1, [r2, #0]
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3318      	adds	r3, #24
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	440b      	add	r3, r1
 8001952:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e00e      	b.n	8001976 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e006      	b.n	8001976 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
  }
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001982:	b480      	push	{r7}
 8001984:	b087      	sub	sp, #28
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001996:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d003      	beq.n	80019a6 <HAL_CAN_GetRxMessage+0x24>
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	f040 80f3 	bne.w	8001b8c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10e      	bne.n	80019ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0e7      	b.n	8001b9a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d8      	b.n	8001b9a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	331b      	adds	r3, #27
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4413      	add	r3, r2
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0204 	and.w	r2, r3, #4
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0d5b      	lsrs	r3, r3, #21
 8001a16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	331b      	adds	r3, #27
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	08db      	lsrs	r3, r3, #3
 8001a30:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	331b      	adds	r3, #27
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0202 	and.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	331b      	adds	r3, #27
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	4413      	add	r3, r2
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 020f 	and.w	r2, r3, #15
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	331b      	adds	r3, #27
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	3304      	adds	r3, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	331b      	adds	r3, #27
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0a1a      	lsrs	r2, r3, #8
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0c1a      	lsrs	r2, r3, #16
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3302      	adds	r3, #2
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0e1a      	lsrs	r2, r3, #24
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	3303      	adds	r3, #3
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0a1a      	lsrs	r2, r3, #8
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	3305      	adds	r3, #5
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0c1a      	lsrs	r2, r3, #16
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3306      	adds	r3, #6
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0e1a      	lsrs	r2, r3, #24
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3307      	adds	r3, #7
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0220 	orr.w	r2, r2, #32
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	e007      	b.n	8001b88 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e006      	b.n	8001b9a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d002      	beq.n	8001bc4 <HAL_CAN_ActivateNotification+0x1e>
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d109      	bne.n	8001bd8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6959      	ldr	r1, [r3, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e006      	b.n	8001be6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
  }
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b08a      	sub	sp, #40	; 0x28
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d07c      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d023      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f983 	bl	8001f60 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c5a:	e016      	b.n	8001c8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	e00c      	b.n	8001c8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	e002      	b.n	8001c8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f989 	bl	8001f9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d024      	beq.n	8001cde <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f963 	bl	8001f74 <HAL_CAN_TxMailbox1CompleteCallback>
 8001cae:	e016      	b.n	8001cde <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	e00c      	b.n	8001cde <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	e002      	b.n	8001cde <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f969 	bl	8001fb0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d024      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cf0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f943 	bl	8001f88 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d02:	e016      	b.n	8001d32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	e00c      	b.n	8001d32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	e002      	b.n	8001d32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f949 	bl	8001fc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2210      	movs	r2, #16
 8001d54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2208      	movs	r2, #8
 8001d70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f930 	bl	8001fd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe ff79 	bl	8000c88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2210      	movs	r2, #16
 8001db8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00b      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d006      	beq.n	8001ddc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f912 	bl	8002000 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ddc:	6a3b      	ldr	r3, [r7, #32]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8f9 	bl	8001fec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00b      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2210      	movs	r2, #16
 8001e14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8fc 	bl	8002014 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2208      	movs	r2, #8
 8001e36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8f5 	bl	8002028 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07b      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d072      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	f043 0304 	orr.w	r3, r3, #4
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d043      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d03e      	beq.n	8001f38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec0:	2b60      	cmp	r3, #96	; 0x60
 8001ec2:	d02b      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x32a>
 8001ec4:	2b60      	cmp	r3, #96	; 0x60
 8001ec6:	d82e      	bhi.n	8001f26 <HAL_CAN_IRQHandler+0x334>
 8001ec8:	2b50      	cmp	r3, #80	; 0x50
 8001eca:	d022      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x320>
 8001ecc:	2b50      	cmp	r3, #80	; 0x50
 8001ece:	d82a      	bhi.n	8001f26 <HAL_CAN_IRQHandler+0x334>
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d019      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x316>
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d826      	bhi.n	8001f26 <HAL_CAN_IRQHandler+0x334>
 8001ed8:	2b30      	cmp	r3, #48	; 0x30
 8001eda:	d010      	beq.n	8001efe <HAL_CAN_IRQHandler+0x30c>
 8001edc:	2b30      	cmp	r3, #48	; 0x30
 8001ede:	d822      	bhi.n	8001f26 <HAL_CAN_IRQHandler+0x334>
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d002      	beq.n	8001eea <HAL_CAN_IRQHandler+0x2f8>
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d005      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ee8:	e01d      	b.n	8001f26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ef2:	e019      	b.n	8001f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	f043 0310 	orr.w	r3, r3, #16
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001efc:	e014      	b.n	8001f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f043 0320 	orr.w	r3, r3, #32
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f06:	e00f      	b.n	8001f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f10:	e00a      	b.n	8001f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f1a:	e005      	b.n	8001f28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001f24:	e000      	b.n	8001f28 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f872 	bl	800203c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021b0:	f3bf 8f4f 	dsb	sy
}
 80021b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <__NVIC_SystemReset+0x24>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80021be:	4904      	ldr	r1, [pc, #16]	; (80021d0 <__NVIC_SystemReset+0x24>)
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_SystemReset+0x28>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80021c6:	f3bf 8f4f 	dsb	sy
}
 80021ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <__NVIC_SystemReset+0x20>
 80021d0:	e000ed00 	.word	0xe000ed00
 80021d4:	05fa0004 	.word	0x05fa0004

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff78 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff13 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff28 	bl	8002098 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff78 	bl	8002144 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff47 	bl	80020f0 <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff1b 	bl	80020b4 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800228a:	f7ff ff8f 	bl	80021ac <__NVIC_SystemReset>

0800228e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff9e 	bl	80021d8 <SysTick_Config>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff f85e 	bl	8001374 <HAL_GetTick>
 80022b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d008      	beq.n	80022d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2280      	movs	r2, #128	; 0x80
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e052      	b.n	800237e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0216 	bic.w	r2, r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d103      	bne.n	8002308 <HAL_DMA_Abort+0x62>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0208 	bic.w	r2, r2, #8
 8002316:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002328:	e013      	b.n	8002352 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800232a:	f7ff f823 	bl	8001374 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b05      	cmp	r3, #5
 8002336:	d90c      	bls.n	8002352 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e015      	b.n	800237e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e4      	bne.n	800232a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	223f      	movs	r2, #63	; 0x3f
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d004      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e00c      	b.n	80023be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2205      	movs	r2, #5
 80023a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 0201 	bic.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_FLASH_Program+0xa0>)
 80023e0:	7e1b      	ldrb	r3, [r3, #24]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_FLASH_Program+0x1e>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e03b      	b.n	8002462 <HAL_FLASH_Program+0x96>
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_FLASH_Program+0xa0>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023f4:	f000 f87c 	bl	80024f0 <FLASH_WaitForLastOperation>
 80023f8:	4603      	mov	r3, r0
 80023fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023fc:	7dfb      	ldrb	r3, [r7, #23]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12b      	bne.n	800245a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002408:	783b      	ldrb	r3, [r7, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	68b8      	ldr	r0, [r7, #8]
 800240e:	f000 f927 	bl	8002660 <FLASH_Program_Byte>
 8002412:	e016      	b.n	8002442 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800241a:	883b      	ldrh	r3, [r7, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	68b8      	ldr	r0, [r7, #8]
 8002420:	f000 f8fa 	bl	8002618 <FLASH_Program_HalfWord>
 8002424:	e00d      	b.n	8002442 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d105      	bne.n	8002438 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f000 f8cf 	bl	80025d4 <FLASH_Program_Word>
 8002436:	e004      	b.n	8002442 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243c:	68b8      	ldr	r0, [r7, #8]
 800243e:	f000 f897 	bl	8002570 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002442:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002446:	f000 f853 	bl	80024f0 <FLASH_WaitForLastOperation>
 800244a:	4603      	mov	r3, r0
 800244c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_FLASH_Program+0xa4>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_FLASH_Program+0xa4>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_FLASH_Program+0xa0>)
 800245c:	2200      	movs	r2, #0
 800245e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002460:	7dfb      	ldrb	r3, [r7, #23]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	200002e4 	.word	0x200002e4
 8002470:	40023c00 	.word	0x40023c00

08002474 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_FLASH_Unlock+0x38>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	da0b      	bge.n	800249e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_FLASH_Unlock+0x38>)
 8002488:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_FLASH_Unlock+0x3c>)
 800248a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_FLASH_Unlock+0x38>)
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <HAL_FLASH_Unlock+0x40>)
 8002490:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_FLASH_Unlock+0x38>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da01      	bge.n	800249e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800249e:	79fb      	ldrb	r3, [r7, #7]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	40023c00 	.word	0x40023c00
 80024b0:	45670123 	.word	0x45670123
 80024b4:	cdef89ab 	.word	0xcdef89ab

080024b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_FLASH_Lock+0x1c>)
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_FLASH_Lock+0x1c>)
 80024c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40023c00 	.word	0x40023c00

080024d8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_FLASH_GetError+0x14>)
 80024de:	69db      	ldr	r3, [r3, #28]
}  
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200002e4 	.word	0x200002e4

080024f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <FLASH_WaitForLastOperation+0x78>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002502:	f7fe ff37 	bl	8001374 <HAL_GetTick>
 8002506:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002508:	e010      	b.n	800252c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d00c      	beq.n	800252c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <FLASH_WaitForLastOperation+0x38>
 8002518:	f7fe ff2c 	bl	8001374 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d201      	bcs.n	800252c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e019      	b.n	8002560 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <FLASH_WaitForLastOperation+0x7c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e8      	bne.n	800250a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <FLASH_WaitForLastOperation+0x7c>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <FLASH_WaitForLastOperation+0x7c>)
 8002546:	2201      	movs	r2, #1
 8002548:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <FLASH_WaitForLastOperation+0x7c>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002556:	f000 f8a5 	bl	80026a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
  
}  
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	200002e4 	.word	0x200002e4
 800256c:	40023c00 	.word	0x40023c00

08002570 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <FLASH_Program_DoubleWord+0x60>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <FLASH_Program_DoubleWord+0x60>)
 8002582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002586:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <FLASH_Program_DoubleWord+0x60>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <FLASH_Program_DoubleWord+0x60>)
 800258e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002592:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <FLASH_Program_DoubleWord+0x60>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <FLASH_Program_DoubleWord+0x60>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80025a6:	f3bf 8f6f 	isb	sy
}
 80025aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	000a      	movs	r2, r1
 80025ba:	2300      	movs	r3, #0
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	3104      	adds	r1, #4
 80025c0:	4613      	mov	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40023c00 	.word	0x40023c00

080025d4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <FLASH_Program_Word+0x40>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <FLASH_Program_Word+0x40>)
 80025e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <FLASH_Program_Word+0x40>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <FLASH_Program_Word+0x40>)
 80025f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <FLASH_Program_Word+0x40>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	4a06      	ldr	r2, [pc, #24]	; (8002614 <FLASH_Program_Word+0x40>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40023c00 	.word	0x40023c00

08002618 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <FLASH_Program_HalfWord+0x44>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4a0c      	ldr	r2, [pc, #48]	; (800265c <FLASH_Program_HalfWord+0x44>)
 800262a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <FLASH_Program_HalfWord+0x44>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4a09      	ldr	r2, [pc, #36]	; (800265c <FLASH_Program_HalfWord+0x44>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800263c:	4b07      	ldr	r3, [pc, #28]	; (800265c <FLASH_Program_HalfWord+0x44>)
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <FLASH_Program_HalfWord+0x44>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	887a      	ldrh	r2, [r7, #2]
 800264c:	801a      	strh	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00

08002660 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <FLASH_Program_Byte+0x40>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	4a0b      	ldr	r2, [pc, #44]	; (80026a0 <FLASH_Program_Byte+0x40>)
 8002672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002676:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <FLASH_Program_Byte+0x40>)
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <FLASH_Program_Byte+0x40>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <FLASH_Program_Byte+0x40>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <FLASH_Program_Byte+0x40>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	701a      	strb	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00

080026a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <FLASH_SetErrorCode+0xc8>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	4a2b      	ldr	r2, [pc, #172]	; (800276c <FLASH_SetErrorCode+0xc8>)
 80026be:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 80026c2:	2210      	movs	r2, #16
 80026c4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026c6:	4b28      	ldr	r3, [pc, #160]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <FLASH_SetErrorCode+0xc8>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	4a24      	ldr	r2, [pc, #144]	; (800276c <FLASH_SetErrorCode+0xc8>)
 80026dc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 80026e0:	2220      	movs	r2, #32
 80026e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <FLASH_SetErrorCode+0xc8>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <FLASH_SetErrorCode+0xc8>)
 80026fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 80026fe:	2240      	movs	r2, #64	; 0x40
 8002700:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800270e:	4b17      	ldr	r3, [pc, #92]	; (800276c <FLASH_SetErrorCode+0xc8>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	4a15      	ldr	r2, [pc, #84]	; (800276c <FLASH_SetErrorCode+0xc8>)
 8002718:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <FLASH_SetErrorCode+0xc8>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <FLASH_SetErrorCode+0xc8>)
 8002736:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 800273a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <FLASH_SetErrorCode+0xc8>)
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	f043 0320 	orr.w	r3, r3, #32
 8002754:	4a05      	ldr	r2, [pc, #20]	; (800276c <FLASH_SetErrorCode+0xc8>)
 8002756:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <FLASH_SetErrorCode+0xc4>)
 800275a:	2202      	movs	r2, #2
 800275c:	60da      	str	r2, [r3, #12]
  }
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	40023c00 	.word	0x40023c00
 800276c:	200002e4 	.word	0x200002e4

08002770 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_FLASHEx_Erase+0xd8>)
 8002784:	7e1b      	ldrb	r3, [r3, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_FLASHEx_Erase+0x1e>
 800278a:	2302      	movs	r3, #2
 800278c:	e058      	b.n	8002840 <HAL_FLASHEx_Erase+0xd0>
 800278e:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <HAL_FLASHEx_Erase+0xd8>)
 8002790:	2201      	movs	r2, #1
 8002792:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002794:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002798:	f7ff feaa 	bl	80024f0 <FLASH_WaitForLastOperation>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d148      	bne.n	8002838 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d115      	bne.n	80027e2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 f844 	bl	8002850 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027cc:	f7ff fe90 	bl	80024f0 <FLASH_WaitForLastOperation>
 80027d0:	4603      	mov	r3, r0
 80027d2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_FLASHEx_Erase+0xdc>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <HAL_FLASHEx_Erase+0xdc>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6113      	str	r3, [r2, #16]
 80027e0:	e028      	b.n	8002834 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	e01c      	b.n	8002824 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f850 	bl	8002898 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027fc:	f7ff fe78 	bl	80024f0 <FLASH_WaitForLastOperation>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_FLASHEx_Erase+0xdc>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_FLASHEx_Erase+0xdc>)
 800280a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800280e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	601a      	str	r2, [r3, #0]
          break;
 800281c:	e00a      	b.n	8002834 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3301      	adds	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4413      	add	r3, r2
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3da      	bcc.n	80027ea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002834:	f000 f878 	bl	8002928 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_FLASHEx_Erase+0xd8>)
 800283a:	2200      	movs	r2, #0
 800283c:	761a      	strb	r2, [r3, #24]

  return status;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	200002e4 	.word	0x200002e4
 800284c:	40023c00 	.word	0x40023c00

08002850 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <FLASH_MassErase+0x44>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <FLASH_MassErase+0x44>)
 8002862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <FLASH_MassErase+0x44>)
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4a09      	ldr	r2, [pc, #36]	; (8002894 <FLASH_MassErase+0x44>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <FLASH_MassErase+0x44>)
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	4313      	orrs	r3, r2
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <FLASH_MassErase+0x44>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6113      	str	r3, [r2, #16]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023c00 	.word	0x40023c00

08002898 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e010      	b.n	80028d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d103      	bne.n	80028c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80028ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e009      	b.n	80028d6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d103      	bne.n	80028d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80028c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e002      	b.n	80028d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80028d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	490f      	ldr	r1, [pc, #60]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4313      	orrs	r3, r2
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <FLASH_Erase_Sector+0x8c>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	6113      	str	r3, [r2, #16]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	40023c00 	.word	0x40023c00

08002928 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800293e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002942:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a19      	ldr	r2, [pc, #100]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800294a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a16      	ldr	r2, [pc, #88]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800295a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a13      	ldr	r2, [pc, #76]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002966:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d017      	beq.n	80029a4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800297a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <FLASH_FlushCaches+0x88>)
 8002992:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002996:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <FLASH_FlushCaches+0x88>)
 800299e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029a2:	6013      	str	r3, [r2, #0]
  }
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e165      	b.n	8002c9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8154 	bne.w	8002c96 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80ae 	beq.w	8002c96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a5c      	ldr	r2, [pc, #368]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	; (8002cb4 <HAL_GPIO_Init+0x300>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b56:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4f      	ldr	r2, [pc, #316]	; (8002cbc <HAL_GPIO_Init+0x308>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d025      	beq.n	8002bce <HAL_GPIO_Init+0x21a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4e      	ldr	r2, [pc, #312]	; (8002cc0 <HAL_GPIO_Init+0x30c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01f      	beq.n	8002bca <HAL_GPIO_Init+0x216>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_GPIO_Init+0x310>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d019      	beq.n	8002bc6 <HAL_GPIO_Init+0x212>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_GPIO_Init+0x314>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0x20e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <HAL_GPIO_Init+0x318>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00d      	beq.n	8002bbe <HAL_GPIO_Init+0x20a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <HAL_GPIO_Init+0x31c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <HAL_GPIO_Init+0x206>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_GPIO_Init+0x320>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_GPIO_Init+0x202>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00c      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00a      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bba:	2305      	movs	r3, #5
 8002bbc:	e008      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x21c>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f002 0203 	and.w	r2, r2, #3
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be0:	4935      	ldr	r1, [pc, #212]	; (8002cb8 <HAL_GPIO_Init+0x304>)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3302      	adds	r3, #2
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bee:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c12:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c3c:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c66:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c90:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <HAL_GPIO_Init+0x324>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b0f      	cmp	r3, #15
 8002ca0:	f67f ae96 	bls.w	80029d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020c00 	.word	0x40020c00
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40021400 	.word	0x40021400
 8002cd4:	40021800 	.word	0x40021800
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	041a      	lsls	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	43d9      	mvns	r1, r3
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	400b      	ands	r3, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	619a      	str	r2, [r3, #24]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d5a:	4a05      	ldr	r2, [pc, #20]	; (8002d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f806 	bl	8002d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40013c00 	.word	0x40013c00

08002d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <HAL_PWREx_EnableOverDrive+0x90>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002db2:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_PWREx_EnableOverDrive+0x94>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db8:	f7fe fadc 	bl	8001374 <HAL_GetTick>
 8002dbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dbe:	e009      	b.n	8002dd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dc0:	f7fe fad8 	bl	8001374 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dce:	d901      	bls.n	8002dd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e01f      	b.n	8002e14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de8:	f7fe fac4 	bl	8001374 <HAL_GetTick>
 8002dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dee:	e009      	b.n	8002e04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df0:	f7fe fac0 	bl	8001374 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dfe:	d901      	bls.n	8002e04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e007      	b.n	8002e14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e10:	d1ee      	bne.n	8002df0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	420e0040 	.word	0x420e0040
 8002e24:	40007000 	.word	0x40007000
 8002e28:	420e0044 	.word	0x420e0044

08002e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0cc      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e40:	4b68      	ldr	r3, [pc, #416]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d90c      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b8      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	494d      	ldr	r1, [pc, #308]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d044      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d119      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e07f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d107      	bne.n	8002efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eea:	4b3f      	ldr	r3, [pc, #252]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e06f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efa:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e067      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f0a:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4934      	ldr	r1, [pc, #208]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fa2a 	bl	8001374 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f24:	f7fe fa26 	bl	8001374 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e04f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 020c 	and.w	r2, r3, #12
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d1eb      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d20c      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	b2d2      	uxtb	r2, r2
 8002f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb2:	f000 f855 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	5ccb      	ldrb	r3, [r1, r3]
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f98a 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023c00 	.word	0x40023c00
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	08005e18 	.word	0x08005e18
 8002ff0:	20000014 	.word	0x20000014
 8002ff4:	20000018 	.word	0x20000018

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000014 	.word	0x20000014

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a9b      	lsrs	r3, r3, #10
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	08005e28 	.word	0x08005e28

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800303c:	f7ff ffdc 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0b5b      	lsrs	r3, r3, #13
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	08005e28 	.word	0x08005e28

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003064:	b0ae      	sub	sp, #184	; 0xb8
 8003066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003086:	4bcb      	ldr	r3, [pc, #812]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b0c      	cmp	r3, #12
 8003090:	f200 8206 	bhi.w	80034a0 <HAL_RCC_GetSysClockFreq+0x440>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	080034a1 	.word	0x080034a1
 80030a4:	080034a1 	.word	0x080034a1
 80030a8:	080034a1 	.word	0x080034a1
 80030ac:	080030d9 	.word	0x080030d9
 80030b0:	080034a1 	.word	0x080034a1
 80030b4:	080034a1 	.word	0x080034a1
 80030b8:	080034a1 	.word	0x080034a1
 80030bc:	080030e1 	.word	0x080030e1
 80030c0:	080034a1 	.word	0x080034a1
 80030c4:	080034a1 	.word	0x080034a1
 80030c8:	080034a1 	.word	0x080034a1
 80030cc:	080032d1 	.word	0x080032d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4bb9      	ldr	r3, [pc, #740]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x358>)
 80030d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80030d6:	e1e7      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030d8:	4bb8      	ldr	r3, [pc, #736]	; (80033bc <HAL_RCC_GetSysClockFreq+0x35c>)
 80030da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030de:	e1e3      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e0:	4bb4      	ldr	r3, [pc, #720]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ec:	4bb1      	ldr	r3, [pc, #708]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d071      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f8:	4bae      	ldr	r3, [pc, #696]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003104:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003108:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800310c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800311a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800311e:	4622      	mov	r2, r4
 8003120:	462b      	mov	r3, r5
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	0159      	lsls	r1, r3, #5
 800312c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003130:	0150      	lsls	r0, r2, #5
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4621      	mov	r1, r4
 8003138:	1a51      	subs	r1, r2, r1
 800313a:	6439      	str	r1, [r7, #64]	; 0x40
 800313c:	4629      	mov	r1, r5
 800313e:	eb63 0301 	sbc.w	r3, r3, r1
 8003142:	647b      	str	r3, [r7, #68]	; 0x44
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003150:	4649      	mov	r1, r9
 8003152:	018b      	lsls	r3, r1, #6
 8003154:	4641      	mov	r1, r8
 8003156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800315a:	4641      	mov	r1, r8
 800315c:	018a      	lsls	r2, r1, #6
 800315e:	4641      	mov	r1, r8
 8003160:	1a51      	subs	r1, r2, r1
 8003162:	63b9      	str	r1, [r7, #56]	; 0x38
 8003164:	4649      	mov	r1, r9
 8003166:	eb63 0301 	sbc.w	r3, r3, r1
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003178:	4649      	mov	r1, r9
 800317a:	00cb      	lsls	r3, r1, #3
 800317c:	4641      	mov	r1, r8
 800317e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003182:	4641      	mov	r1, r8
 8003184:	00ca      	lsls	r2, r1, #3
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	4603      	mov	r3, r0
 800318c:	4622      	mov	r2, r4
 800318e:	189b      	adds	r3, r3, r2
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
 8003192:	462b      	mov	r3, r5
 8003194:	460a      	mov	r2, r1
 8003196:	eb42 0303 	adc.w	r3, r2, r3
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80031a8:	4629      	mov	r1, r5
 80031aa:	024b      	lsls	r3, r1, #9
 80031ac:	4621      	mov	r1, r4
 80031ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031b2:	4621      	mov	r1, r4
 80031b4:	024a      	lsls	r2, r1, #9
 80031b6:	4610      	mov	r0, r2
 80031b8:	4619      	mov	r1, r3
 80031ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031c8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80031cc:	f7fd f878 	bl	80002c0 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031da:	e067      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031dc:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	2200      	movs	r2, #0
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80031ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031f6:	2300      	movs	r3, #0
 80031f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80031fe:	4622      	mov	r2, r4
 8003200:	462b      	mov	r3, r5
 8003202:	f04f 0000 	mov.w	r0, #0
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	0159      	lsls	r1, r3, #5
 800320c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003210:	0150      	lsls	r0, r2, #5
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4621      	mov	r1, r4
 8003218:	1a51      	subs	r1, r2, r1
 800321a:	62b9      	str	r1, [r7, #40]	; 0x28
 800321c:	4629      	mov	r1, r5
 800321e:	eb63 0301 	sbc.w	r3, r3, r1
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003230:	4649      	mov	r1, r9
 8003232:	018b      	lsls	r3, r1, #6
 8003234:	4641      	mov	r1, r8
 8003236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800323a:	4641      	mov	r1, r8
 800323c:	018a      	lsls	r2, r1, #6
 800323e:	4641      	mov	r1, r8
 8003240:	ebb2 0a01 	subs.w	sl, r2, r1
 8003244:	4649      	mov	r1, r9
 8003246:	eb63 0b01 	sbc.w	fp, r3, r1
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003256:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800325a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325e:	4692      	mov	sl, r2
 8003260:	469b      	mov	fp, r3
 8003262:	4623      	mov	r3, r4
 8003264:	eb1a 0303 	adds.w	r3, sl, r3
 8003268:	623b      	str	r3, [r7, #32]
 800326a:	462b      	mov	r3, r5
 800326c:	eb4b 0303 	adc.w	r3, fp, r3
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800327e:	4629      	mov	r1, r5
 8003280:	028b      	lsls	r3, r1, #10
 8003282:	4621      	mov	r1, r4
 8003284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003288:	4621      	mov	r1, r4
 800328a:	028a      	lsls	r2, r1, #10
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003294:	2200      	movs	r2, #0
 8003296:	673b      	str	r3, [r7, #112]	; 0x70
 8003298:	677a      	str	r2, [r7, #116]	; 0x74
 800329a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800329e:	f7fd f80f 	bl	80002c0 <__aeabi_uldivmod>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4613      	mov	r3, r2
 80032a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032ac:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	0c1b      	lsrs	r3, r3, #16
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	3301      	adds	r3, #1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80032be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ce:	e0eb      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d0:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032dc:	4b35      	ldr	r3, [pc, #212]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d06b      	beq.n	80033c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	2200      	movs	r2, #0
 80032f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fa:	663b      	str	r3, [r7, #96]	; 0x60
 80032fc:	2300      	movs	r3, #0
 80032fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003300:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003304:	4622      	mov	r2, r4
 8003306:	462b      	mov	r3, r5
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4621      	mov	r1, r4
 800331e:	1a51      	subs	r1, r2, r1
 8003320:	61b9      	str	r1, [r7, #24]
 8003322:	4629      	mov	r1, r5
 8003324:	eb63 0301 	sbc.w	r3, r3, r1
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003336:	4659      	mov	r1, fp
 8003338:	018b      	lsls	r3, r1, #6
 800333a:	4651      	mov	r1, sl
 800333c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003340:	4651      	mov	r1, sl
 8003342:	018a      	lsls	r2, r1, #6
 8003344:	4651      	mov	r1, sl
 8003346:	ebb2 0801 	subs.w	r8, r2, r1
 800334a:	4659      	mov	r1, fp
 800334c:	eb63 0901 	sbc.w	r9, r3, r1
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003360:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003364:	4690      	mov	r8, r2
 8003366:	4699      	mov	r9, r3
 8003368:	4623      	mov	r3, r4
 800336a:	eb18 0303 	adds.w	r3, r8, r3
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	462b      	mov	r3, r5
 8003372:	eb49 0303 	adc.w	r3, r9, r3
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003384:	4629      	mov	r1, r5
 8003386:	024b      	lsls	r3, r1, #9
 8003388:	4621      	mov	r1, r4
 800338a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800338e:	4621      	mov	r1, r4
 8003390:	024a      	lsls	r2, r1, #9
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800339a:	2200      	movs	r2, #0
 800339c:	65bb      	str	r3, [r7, #88]	; 0x58
 800339e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80033a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033a4:	f7fc ff8c 	bl	80002c0 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033b2:	e065      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x420>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c0:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	2200      	movs	r2, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	4611      	mov	r1, r2
 80033cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d0:	653b      	str	r3, [r7, #80]	; 0x50
 80033d2:	2300      	movs	r3, #0
 80033d4:	657b      	str	r3, [r7, #84]	; 0x54
 80033d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80033da:	4642      	mov	r2, r8
 80033dc:	464b      	mov	r3, r9
 80033de:	f04f 0000 	mov.w	r0, #0
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	0159      	lsls	r1, r3, #5
 80033e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ec:	0150      	lsls	r0, r2, #5
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4641      	mov	r1, r8
 80033f4:	1a51      	subs	r1, r2, r1
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	4649      	mov	r1, r9
 80033fa:	eb63 0301 	sbc.w	r3, r3, r1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800340c:	4659      	mov	r1, fp
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003416:	4651      	mov	r1, sl
 8003418:	018a      	lsls	r2, r1, #6
 800341a:	4651      	mov	r1, sl
 800341c:	1a54      	subs	r4, r2, r1
 800341e:	4659      	mov	r1, fp
 8003420:	eb63 0501 	sbc.w	r5, r3, r1
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	00eb      	lsls	r3, r5, #3
 800342e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003432:	00e2      	lsls	r2, r4, #3
 8003434:	4614      	mov	r4, r2
 8003436:	461d      	mov	r5, r3
 8003438:	4643      	mov	r3, r8
 800343a:	18e3      	adds	r3, r4, r3
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	464b      	mov	r3, r9
 8003440:	eb45 0303 	adc.w	r3, r5, r3
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003452:	4629      	mov	r1, r5
 8003454:	028b      	lsls	r3, r1, #10
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800345c:	4621      	mov	r1, r4
 800345e:	028a      	lsls	r2, r1, #10
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003468:	2200      	movs	r2, #0
 800346a:	64bb      	str	r3, [r7, #72]	; 0x48
 800346c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800346e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003472:	f7fc ff25 	bl	80002c0 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4613      	mov	r3, r2
 800347c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003480:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0f1b      	lsrs	r3, r3, #28
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800348e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800349e:	e003      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	37b8      	adds	r7, #184	; 0xb8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400

080034c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e28d      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8083 	beq.w	80035e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034e0:	4b94      	ldr	r3, [pc, #592]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d019      	beq.n	8003520 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ec:	4b91      	ldr	r3, [pc, #580]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034f8:	4b8e      	ldr	r3, [pc, #568]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003504:	d00c      	beq.n	8003520 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003506:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d112      	bne.n	8003538 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800351e:	d10b      	bne.n	8003538 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	4b84      	ldr	r3, [pc, #528]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x124>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d157      	bne.n	80035e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e25a      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d106      	bne.n	8003550 <HAL_RCC_OscConfig+0x90>
 8003542:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7b      	ldr	r2, [pc, #492]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xcc>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0xb4>
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a72      	ldr	r2, [pc, #456]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xcc>
 8003574:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b6c      	ldr	r3, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a6b      	ldr	r2, [pc, #428]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fd feee 	bl	8001374 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359c:	f7fd feea 	bl	8001374 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e21f      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xdc>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd feda 	bl	8001374 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fd fed6 	bl	8001374 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e20b      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x104>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06f      	beq.n	80036d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035f2:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d017      	beq.n	800362e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035fe:	4b4d      	ldr	r3, [pc, #308]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003606:	2b08      	cmp	r3, #8
 8003608:	d105      	bne.n	8003616 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x186>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1d3      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_OscConfig+0x278>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd fe83 	bl	8001374 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003672:	f7fd fe7f 	bl	8001374 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1b4      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x278>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd fe62 	bl	8001374 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fd fe5e 	bl	8001374 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e193      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd fe42 	bl	8001374 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fd fe3e 	bl	8001374 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e173      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x274>)
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x234>
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fd fe2b 	bl	8001374 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003722:	f7fd fe27 	bl	8001374 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e15c      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b8a      	ldr	r3, [pc, #552]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b83      	ldr	r3, [pc, #524]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7e      	ldr	r2, [pc, #504]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b79      	ldr	r3, [pc, #484]	; (8003970 <HAL_RCC_OscConfig+0x4b0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b76      	ldr	r3, [pc, #472]	; (8003970 <HAL_RCC_OscConfig+0x4b0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a75      	ldr	r2, [pc, #468]	; (8003970 <HAL_RCC_OscConfig+0x4b0>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fd fde7 	bl	8001374 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fd fde3 	bl	8001374 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e118      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6c      	ldr	r3, [pc, #432]	; (8003970 <HAL_RCC_OscConfig+0x4b0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x31e>
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x358>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x340>
 80037e6:	4b61      	ldr	r3, [pc, #388]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a60      	ldr	r2, [pc, #384]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5e      	ldr	r3, [pc, #376]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5d      	ldr	r2, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x358>
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a59      	ldr	r2, [pc, #356]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b57      	ldr	r3, [pc, #348]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7fd fda8 	bl	8001374 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd fda4 	bl	8001374 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0d7      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x368>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384c:	f7fd fd92 	bl	8001374 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fd fd8e 	bl	8001374 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0c1      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80ad 	beq.w	80039ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d060      	beq.n	8003960 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d145      	bne.n	8003932 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <HAL_RCC_OscConfig+0x4b4>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fd fd62 	bl	8001374 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7fd fd5e 	bl	8001374 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e093      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	071b      	lsls	r3, r3, #28
 80038fe:	491b      	ldr	r1, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003904:	4b1b      	ldr	r3, [pc, #108]	; (8003974 <HAL_RCC_OscConfig+0x4b4>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fd fd33 	bl	8001374 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003912:	f7fd fd2f 	bl	8001374 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e064      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x452>
 8003930:	e05c      	b.n	80039ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_OscConfig+0x4b4>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fd fd1c 	bl	8001374 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7fd fd18 	bl	8001374 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e04d      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_OscConfig+0x4ac>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x480>
 800395e:	e045      	b.n	80039ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e040      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
 800396c:	40023800 	.word	0x40023800
 8003970:	40007000 	.word	0x40007000
 8003974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x538>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d030      	beq.n	80039e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d129      	bne.n	80039e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d122      	bne.n	80039e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d119      	bne.n	80039e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d10f      	bne.n	80039e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fafc 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 f9ce 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d001      	beq.n	8003ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04e      	b.n	8003b52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d022      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ade:	d01d      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d018      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00e      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d009      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_TIM_Base_Start_IT+0x80>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d111      	bne.n	8003b40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d010      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	e007      	b.n	8003b50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40010400 	.word	0x40010400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40001800 	.word	0x40001800

08003b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0202 	mvn.w	r2, #2
 8003ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8ee 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8e0 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f8f1 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0204 	mvn.w	r2, #4
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8c4 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8b6 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8c7 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0208 	mvn.w	r2, #8
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2204      	movs	r2, #4
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f89a 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f88c 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f89d 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0310 	and.w	r3, r3, #16
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0210 	mvn.w	r2, #16
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f870 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f862 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f873 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0201 	mvn.w	r2, #1
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fc ffa2 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f97e 	bl	8004028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f838 	bl	8003dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0220 	mvn.w	r2, #32
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f948 	bl	8004014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d00f      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3d      	ldr	r2, [pc, #244]	; (8003ef4 <TIM_Base_SetConfig+0x118>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <TIM_Base_SetConfig+0x11c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3a      	ldr	r2, [pc, #232]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2f      	ldr	r2, [pc, #188]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d02b      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d027      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <TIM_Base_SetConfig+0x118>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d023      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <TIM_Base_SetConfig+0x11c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01b      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d017      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <TIM_Base_SetConfig+0x128>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <TIM_Base_SetConfig+0x12c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00f      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <TIM_Base_SetConfig+0x130>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a25      	ldr	r2, [pc, #148]	; (8003f10 <TIM_Base_SetConfig+0x134>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <TIM_Base_SetConfig+0x138>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <TIM_Base_SetConfig+0x13c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d108      	bne.n	8003ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0xf8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d103      	bne.n	8003edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	615a      	str	r2, [r3, #20]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800
 8003f10:	40001800 	.word	0x40001800
 8003f14:	40001c00 	.word	0x40001c00
 8003f18:	40002000 	.word	0x40002000

08003f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e05a      	b.n	8003fea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d022      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d01d      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d018      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a17      	ldr	r2, [pc, #92]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a15      	ldr	r2, [pc, #84]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00
 8004008:	40010400 	.word	0x40010400
 800400c:	40014000 	.word	0x40014000
 8004010:	40001800 	.word	0x40001800

08004014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e03f      	b.n	80040ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd f804 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800407e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fe23 	bl	8004ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b08a      	sub	sp, #40	; 0x28
 80040da:	af02      	add	r7, sp, #8
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b20      	cmp	r3, #32
 80040f4:	d17c      	bne.n	80041f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_UART_Transmit+0x2c>
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e075      	b.n	80041f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_UART_Transmit+0x3e>
 8004110:	2302      	movs	r3, #2
 8004112:	e06e      	b.n	80041f2 <HAL_UART_Transmit+0x11c>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2221      	movs	r2, #33	; 0x21
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800412a:	f7fd f923 	bl	8001374 <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004144:	d108      	bne.n	8004158 <HAL_UART_Transmit+0x82>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d104      	bne.n	8004158 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	e003      	b.n	8004160 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004168:	e02a      	b.n	80041c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 fb63 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e036      	b.n	80041f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	3302      	adds	r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e007      	b.n	80041b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	3301      	adds	r3, #1
 80041b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1cf      	bne.n	800416a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2200      	movs	r2, #0
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fb33 	bl	8004840 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e006      	b.n	80041f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b20      	cmp	r3, #32
 8004212:	d130      	bne.n	8004276 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_UART_Transmit_IT+0x26>
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e029      	b.n	8004278 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Transmit_IT+0x38>
 800422e:	2302      	movs	r3, #2
 8004230:	e022      	b.n	8004278 <HAL_UART_Transmit_IT+0x7e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	88fa      	ldrh	r2, [r7, #6]
 800424a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	; 0x21
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004270:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b20      	cmp	r3, #32
 800429c:	d11d      	bne.n	80042da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_UART_Receive_IT+0x26>
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e016      	b.n	80042dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Receive_IT+0x38>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e00f      	b.n	80042dc <HAL_UART_Receive_IT+0x58>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	461a      	mov	r2, r3
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fb23 	bl	800491c <UART_Start_Receive_IT>
 80042d6:	4603      	mov	r3, r0
 80042d8:	e000      	b.n	80042dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0ba      	sub	sp, #232	; 0xe8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10f      	bne.n	800434a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800432a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_UART_IRQHandler+0x66>
 8004336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fc07 	bl	8004b56 <UART_Receive_IT>
      return;
 8004348:	e256      	b.n	80047f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800434a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80de 	beq.w	8004510 <HAL_UART_IRQHandler+0x22c>
 8004354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d106      	bne.n	800436e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80d1 	beq.w	8004510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_UART_IRQHandler+0xae>
 800437a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f043 0201 	orr.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_UART_IRQHandler+0xd2>
 800439e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f043 0202 	orr.w	r2, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_UART_IRQHandler+0xf6>
 80043c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f043 0204 	orr.w	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d011      	beq.n	800440a <HAL_UART_IRQHandler+0x126>
 80043e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ea:	f003 0320 	and.w	r3, r3, #32
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d105      	bne.n	80043fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0208 	orr.w	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 81ed 	beq.w	80047ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_UART_IRQHandler+0x14e>
 8004420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fb92 	bl	8004b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <HAL_UART_IRQHandler+0x17a>
 8004456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d04f      	beq.n	80044fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa9a 	bl	8004998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d141      	bne.n	80044f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3314      	adds	r3, #20
 8004478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800448c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3314      	adds	r3, #20
 800449a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800449e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80044a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1d9      	bne.n	8004472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d013      	beq.n	80044ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4a7d      	ldr	r2, [pc, #500]	; (80046c0 <HAL_UART_IRQHandler+0x3dc>)
 80044cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd ff57 	bl	8002386 <HAL_DMA_Abort_IT>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e8:	4610      	mov	r0, r2
 80044ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e00e      	b.n	800450c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f990 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e00a      	b.n	800450c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f98c 	bl	8004814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	e006      	b.n	800450c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f988 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800450a:	e170      	b.n	80047ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450c:	bf00      	nop
    return;
 800450e:	e16e      	b.n	80047ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	f040 814a 	bne.w	80047ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800451a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8143 	beq.w	80047ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 813c 	beq.w	80047ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	f040 80b4 	bne.w	80046c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8140 	beq.w	80047f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457a:	429a      	cmp	r2, r3
 800457c:	f080 8139 	bcs.w	80047f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004592:	f000 8088 	beq.w	80046a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1d9      	bne.n	8004596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3314      	adds	r3, #20
 80045e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800460a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800460e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e1      	bne.n	80045e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3314      	adds	r3, #20
 8004624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800462e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3314      	adds	r3, #20
 800463e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e3      	bne.n	800461e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004676:	f023 0310 	bic.w	r3, r3, #16
 800467a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004688:	65ba      	str	r2, [r7, #88]	; 0x58
 800468a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800468e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e3      	bne.n	8004664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd fe00 	bl	80022a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f8b6 	bl	8004828 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046bc:	e099      	b.n	80047f2 <HAL_UART_IRQHandler+0x50e>
 80046be:	bf00      	nop
 80046c0:	08004a5f 	.word	0x08004a5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 808b 	beq.w	80047f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8086 	beq.w	80047f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	e853 3f00 	ldrex	r3, [r3]
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800470e:	647a      	str	r2, [r7, #68]	; 0x44
 8004710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e3      	bne.n	80046ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3314      	adds	r3, #20
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	623b      	str	r3, [r7, #32]
   return(result);
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3314      	adds	r3, #20
 8004742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004746:	633a      	str	r2, [r7, #48]	; 0x30
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800474c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e3      	bne.n	8004722 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	60fb      	str	r3, [r7, #12]
   return(result);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800478c:	61fa      	str	r2, [r7, #28]
 800478e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	617b      	str	r3, [r7, #20]
   return(result);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e3      	bne.n	8004768 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f83e 	bl	8004828 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047ac:	e023      	b.n	80047f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_UART_IRQHandler+0x4ea>
 80047ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f95d 	bl	8004a86 <UART_Transmit_IT>
    return;
 80047cc:	e014      	b.n	80047f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00e      	beq.n	80047f8 <HAL_UART_IRQHandler+0x514>
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f99d 	bl	8004b26 <UART_EndTransmit_IT>
    return;
 80047ec:	e004      	b.n	80047f8 <HAL_UART_IRQHandler+0x514>
    return;
 80047ee:	bf00      	nop
 80047f0:	e002      	b.n	80047f8 <HAL_UART_IRQHandler+0x514>
      return;
 80047f2:	bf00      	nop
 80047f4:	e000      	b.n	80047f8 <HAL_UART_IRQHandler+0x514>
      return;
 80047f6:	bf00      	nop
  }
}
 80047f8:	37e8      	adds	r7, #232	; 0xe8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop

08004800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b090      	sub	sp, #64	; 0x40
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004850:	e050      	b.n	80048f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d04c      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <UART_WaitOnFlagUntilTimeout+0x30>
 8004860:	f7fc fd88 	bl	8001374 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486c:	429a      	cmp	r2, r3
 800486e:	d241      	bcs.n	80048f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004890:	637a      	str	r2, [r7, #52]	; 0x34
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	613b      	str	r3, [r7, #16]
   return(result);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c4:	623a      	str	r2, [r7, #32]
 80048c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	69f9      	ldr	r1, [r7, #28]
 80048ca:	6a3a      	ldr	r2, [r7, #32]
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e00f      	b.n	8004914 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	429a      	cmp	r2, r3
 8004910:	d09f      	beq.n	8004852 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3740      	adds	r7, #64	; 0x40
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2222      	movs	r2, #34	; 0x22
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0220 	orr.w	r2, r2, #32
 8004988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b095      	sub	sp, #84	; 0x54
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c0:	643a      	str	r2, [r7, #64]	; 0x40
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a30:	61ba      	str	r2, [r7, #24]
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6979      	ldr	r1, [r7, #20]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a52:	bf00      	nop
 8004a54:	3754      	adds	r7, #84	; 0x54
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fecb 	bl	8004814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b21      	cmp	r3, #33	; 0x21
 8004a98:	d13e      	bne.n	8004b18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d114      	bne.n	8004ace <UART_Transmit_IT+0x48>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]
 8004acc:	e008      	b.n	8004ae0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6211      	str	r1, [r2, #32]
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4619      	mov	r1, r3
 8004aee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fe5a 	bl	8004800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08c      	sub	sp, #48	; 0x30
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b22      	cmp	r3, #34	; 0x22
 8004b68:	f040 80ab 	bne.w	8004cc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d117      	bne.n	8004ba6 <UART_Receive_IT+0x50>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d113      	bne.n	8004ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba4:	e026      	b.n	8004bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb8:	d007      	beq.n	8004bca <UART_Receive_IT+0x74>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <UART_Receive_IT+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e008      	b.n	8004bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d15a      	bne.n	8004cbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0220 	bic.w	r2, r2, #32
 8004c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d135      	bne.n	8004cb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	623a      	str	r2, [r7, #32]
 8004c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d10a      	bne.n	8004ca6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fdbb 	bl	8004828 <HAL_UARTEx_RxEventCallback>
 8004cb2:	e002      	b.n	8004cba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fc f83f 	bl	8000d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e002      	b.n	8004cc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	; 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b0c0      	sub	sp, #256	; 0x100
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d24:	f021 010c 	bic.w	r1, r1, #12
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d32:	430b      	orrs	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	6999      	ldr	r1, [r3, #24]
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	ea40 0301 	orr.w	r3, r0, r1
 8004d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d005      	beq.n	8004d6c <UART_SetConfig+0xa0>
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b8d      	ldr	r3, [pc, #564]	; (8004f9c <UART_SetConfig+0x2d0>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d104      	bne.n	8004d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fe f964 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8004d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d74:	e003      	b.n	8004d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d76:	f7fe f94b 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8004d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	f040 810c 	bne.w	8004fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	1891      	adds	r1, r2, r2
 8004da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004da6:	415b      	adcs	r3, r3
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dae:	4621      	mov	r1, r4
 8004db0:	eb12 0801 	adds.w	r8, r2, r1
 8004db4:	4629      	mov	r1, r5
 8004db6:	eb43 0901 	adc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ddc:	462b      	mov	r3, r5
 8004dde:	eb49 0303 	adc.w	r3, r9, r3
 8004de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	18db      	adds	r3, r3, r3
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004e00:	4613      	mov	r3, r2
 8004e02:	eb42 0303 	adc.w	r3, r2, r3
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e10:	f7fb fa56 	bl	80002c0 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011c      	lsls	r4, r3, #4
 8004e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	1891      	adds	r1, r2, r2
 8004e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e44:	4641      	mov	r1, r8
 8004e46:	eb12 0a01 	adds.w	sl, r2, r1
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e64:	4692      	mov	sl, r2
 8004e66:	469b      	mov	fp, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e72:	464b      	mov	r3, r9
 8004e74:	eb4b 0303 	adc.w	r3, fp, r3
 8004e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	643b      	str	r3, [r7, #64]	; 0x40
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ea6:	f7fb fa0b 	bl	80002c0 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2264      	movs	r2, #100	; 0x64
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	1acb      	subs	r3, r1, r3
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed4:	441c      	add	r4, r3
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef8:	4641      	mov	r1, r8
 8004efa:	1851      	adds	r1, r2, r1
 8004efc:	6339      	str	r1, [r7, #48]	; 0x30
 8004efe:	4649      	mov	r1, r9
 8004f00:	414b      	adcs	r3, r1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f10:	4659      	mov	r1, fp
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4642      	mov	r2, r8
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	460a      	mov	r2, r1
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f62:	f7fb f9ad 	bl	80002c0 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4422      	add	r2, r4
 8004f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f94:	e105      	b.n	80051a2 <UART_SetConfig+0x4d6>
 8004f96:	bf00      	nop
 8004f98:	40011000 	.word	0x40011000
 8004f9c:	40011400 	.word	0x40011400
 8004fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	1891      	adds	r1, r2, r2
 8004fbc:	6239      	str	r1, [r7, #32]
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0501 	adc.w	r5, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fec:	464b      	mov	r3, r9
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005012:	4629      	mov	r1, r5
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4621      	mov	r1, r4
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005024:	f7fb f94c 	bl	80002c0 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <UART_SetConfig+0x4e4>)
 800502e:	fba3 2302 	umull	r2, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	011c      	lsls	r4, r3, #4
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	1891      	adds	r1, r2, r2
 800504e:	61b9      	str	r1, [r7, #24]
 8005050:	415b      	adcs	r3, r3
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005058:	4641      	mov	r1, r8
 800505a:	1851      	adds	r1, r2, r1
 800505c:	6139      	str	r1, [r7, #16]
 800505e:	4649      	mov	r1, r9
 8005060:	414b      	adcs	r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	00cb      	lsls	r3, r1, #3
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507a:	4651      	mov	r1, sl
 800507c:	00ca      	lsls	r2, r1, #3
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	4603      	mov	r3, r0
 8005084:	4642      	mov	r2, r8
 8005086:	189b      	adds	r3, r3, r2
 8005088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050b0:	4649      	mov	r1, r9
 80050b2:	008b      	lsls	r3, r1, #2
 80050b4:	4641      	mov	r1, r8
 80050b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ba:	4641      	mov	r1, r8
 80050bc:	008a      	lsls	r2, r1, #2
 80050be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050c2:	f7fb f8fd 	bl	80002c0 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050cc:	fba3 1302 	umull	r1, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2164      	movs	r1, #100	; 0x64
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	3332      	adds	r3, #50	; 0x32
 80050de:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ea:	441c      	add	r4, r3
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f0:	2200      	movs	r2, #0
 80050f2:	673b      	str	r3, [r7, #112]	; 0x70
 80050f4:	677a      	str	r2, [r7, #116]	; 0x74
 80050f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050fa:	4642      	mov	r2, r8
 80050fc:	464b      	mov	r3, r9
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	415b      	adcs	r3, r3
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510a:	4641      	mov	r1, r8
 800510c:	1851      	adds	r1, r2, r1
 800510e:	6039      	str	r1, [r7, #0]
 8005110:	4649      	mov	r1, r9
 8005112:	414b      	adcs	r3, r1
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005122:	4659      	mov	r1, fp
 8005124:	00cb      	lsls	r3, r1, #3
 8005126:	4651      	mov	r1, sl
 8005128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800512c:	4651      	mov	r1, sl
 800512e:	00ca      	lsls	r2, r1, #3
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	4603      	mov	r3, r0
 8005136:	4642      	mov	r2, r8
 8005138:	189b      	adds	r3, r3, r2
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
 800513c:	464b      	mov	r3, r9
 800513e:	460a      	mov	r2, r1
 8005140:	eb42 0303 	adc.w	r3, r2, r3
 8005144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	663b      	str	r3, [r7, #96]	; 0x60
 8005150:	667a      	str	r2, [r7, #100]	; 0x64
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800515e:	4649      	mov	r1, r9
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	4641      	mov	r1, r8
 8005164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005168:	4641      	mov	r1, r8
 800516a:	008a      	lsls	r2, r1, #2
 800516c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005170:	f7fb f8a6 	bl	80002c0 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <UART_SetConfig+0x4e4>)
 800517a:	fba3 1302 	umull	r1, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2164      	movs	r1, #100	; 0x64
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	3332      	adds	r3, #50	; 0x32
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <UART_SetConfig+0x4e4>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4422      	add	r2, r4
 80051a0:	609a      	str	r2, [r3, #8]
}
 80051a2:	bf00      	nop
 80051a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051a8:	46bd      	mov	sp, r7
 80051aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ae:	bf00      	nop
 80051b0:	51eb851f 	.word	0x51eb851f

080051b4 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a2e      	ldr	r2, [pc, #184]	; (800527c <GetSector+0xc8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d806      	bhi.n	80051d6 <GetSector+0x22>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ce:	d302      	bcc.n	80051d6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e04b      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <GetSector+0xcc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d806      	bhi.n	80051ec <GetSector+0x38>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <GetSector+0xd0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d302      	bcc.n	80051ec <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e040      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a26      	ldr	r2, [pc, #152]	; (8005288 <GetSector+0xd4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d806      	bhi.n	8005202 <GetSector+0x4e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a25      	ldr	r2, [pc, #148]	; (800528c <GetSector+0xd8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d302      	bcc.n	8005202 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80051fc:	2302      	movs	r3, #2
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	e035      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <GetSector+0xdc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d206      	bcs.n	8005218 <GetSector+0x64>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a21      	ldr	r2, [pc, #132]	; (8005294 <GetSector+0xe0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d302      	bcc.n	8005218 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8005212:	2303      	movs	r3, #3
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e02a      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <GetSector+0xe4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d206      	bcs.n	800522e <GetSector+0x7a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1b      	ldr	r2, [pc, #108]	; (8005290 <GetSector+0xdc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d902      	bls.n	800522e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8005228:	2304      	movs	r3, #4
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e01f      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <GetSector+0xe8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d206      	bcs.n	8005244 <GetSector+0x90>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a17      	ldr	r2, [pc, #92]	; (8005298 <GetSector+0xe4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d902      	bls.n	8005244 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800523e:	2305      	movs	r3, #5
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e014      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <GetSector+0xec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d206      	bcs.n	800525a <GetSector+0xa6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a13      	ldr	r2, [pc, #76]	; (800529c <GetSector+0xe8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d902      	bls.n	800525a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8005254:	2306      	movs	r3, #6
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e009      	b.n	800526e <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a11      	ldr	r2, [pc, #68]	; (80052a4 <GetSector+0xf0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d205      	bcs.n	800526e <GetSector+0xba>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <GetSector+0xec>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800526a:	2307      	movs	r3, #7
 800526c:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	08003ffe 	.word	0x08003ffe
 8005280:	08007ffe 	.word	0x08007ffe
 8005284:	08004000 	.word	0x08004000
 8005288:	0800bffe 	.word	0x0800bffe
 800528c:	08008000 	.word	0x08008000
 8005290:	0800ffff 	.word	0x0800ffff
 8005294:	0800c000 	.word	0x0800c000
 8005298:	0801ffff 	.word	0x0801ffff
 800529c:	0803ffff 	.word	0x0803ffff
 80052a0:	0805ffff 	.word	0x0805ffff
 80052a4:	0807ffff 	.word	0x0807ffff

080052a8 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80052a8:	b5b0      	push	{r4, r5, r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80052ba:	f7fd f8db 	bl	8002474 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff ff78 	bl	80051b4 <GetSector>
 80052c4:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 80052d2:	69f8      	ldr	r0, [r7, #28]
 80052d4:	f7ff ff6e 	bl	80051b4 <GetSector>
 80052d8:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <Flash_Write_Data+0xb8>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80052e0:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <Flash_Write_Data+0xb8>)
 80052e2:	2202      	movs	r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <Flash_Write_Data+0xb8>)
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	3301      	adds	r3, #1
 80052f4:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <Flash_Write_Data+0xb8>)
 80052f6:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	4619      	mov	r1, r3
 80052fe:	4818      	ldr	r0, [pc, #96]	; (8005360 <Flash_Write_Data+0xb8>)
 8005300:	f7fd fa36 	bl	8002770 <HAL_FLASHEx_Erase>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01f      	beq.n	800534a <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800530a:	f7fd f8e5 	bl	80024d8 <HAL_FLASH_GetError>
 800530e:	4603      	mov	r3, r0
 8005310:	e022      	b.n	8005358 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4413      	add	r3, r2
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2200      	movs	r2, #0
 800531e:	461c      	mov	r4, r3
 8005320:	4615      	mov	r5, r2
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	2002      	movs	r0, #2
 800532a:	f7fd f84f 	bl	80023cc <HAL_FLASH_Program>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3304      	adds	r3, #4
 8005338:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	3301      	adds	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
 8005340:	e003      	b.n	800534a <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8005342:	f7fd f8c9 	bl	80024d8 <HAL_FLASH_GetError>
 8005346:	4603      	mov	r3, r0
 8005348:	e006      	b.n	8005358 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534e:	429a      	cmp	r2, r3
 8005350:	dbdf      	blt.n	8005312 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8005352:	f7fd f8b1 	bl	80024b8 <HAL_FLASH_Lock>

	   return 0;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3728      	adds	r7, #40	; 0x28
 800535c:	46bd      	mov	sp, r7
 800535e:	bdb0      	pop	{r4, r5, r7, pc}
 8005360:	20000304 	.word	0x20000304

08005364 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3304      	adds	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	3304      	adds	r3, #4
 8005384:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	1e5a      	subs	r2, r3, #1
 800538a:	80fa      	strh	r2, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d000      	beq.n	8005392 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8005390:	e7ef      	b.n	8005372 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8005392:	bf00      	nop
	}
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <__errno>:
 80053a0:	4b01      	ldr	r3, [pc, #4]	; (80053a8 <__errno+0x8>)
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000020 	.word	0x20000020

080053ac <__libc_init_array>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	4d0d      	ldr	r5, [pc, #52]	; (80053e4 <__libc_init_array+0x38>)
 80053b0:	4c0d      	ldr	r4, [pc, #52]	; (80053e8 <__libc_init_array+0x3c>)
 80053b2:	1b64      	subs	r4, r4, r5
 80053b4:	10a4      	asrs	r4, r4, #2
 80053b6:	2600      	movs	r6, #0
 80053b8:	42a6      	cmp	r6, r4
 80053ba:	d109      	bne.n	80053d0 <__libc_init_array+0x24>
 80053bc:	4d0b      	ldr	r5, [pc, #44]	; (80053ec <__libc_init_array+0x40>)
 80053be:	4c0c      	ldr	r4, [pc, #48]	; (80053f0 <__libc_init_array+0x44>)
 80053c0:	f000 fc8e 	bl	8005ce0 <_init>
 80053c4:	1b64      	subs	r4, r4, r5
 80053c6:	10a4      	asrs	r4, r4, #2
 80053c8:	2600      	movs	r6, #0
 80053ca:	42a6      	cmp	r6, r4
 80053cc:	d105      	bne.n	80053da <__libc_init_array+0x2e>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d4:	4798      	blx	r3
 80053d6:	3601      	adds	r6, #1
 80053d8:	e7ee      	b.n	80053b8 <__libc_init_array+0xc>
 80053da:	f855 3b04 	ldr.w	r3, [r5], #4
 80053de:	4798      	blx	r3
 80053e0:	3601      	adds	r6, #1
 80053e2:	e7f2      	b.n	80053ca <__libc_init_array+0x1e>
 80053e4:	08005e6c 	.word	0x08005e6c
 80053e8:	08005e6c 	.word	0x08005e6c
 80053ec:	08005e6c 	.word	0x08005e6c
 80053f0:	08005e70 	.word	0x08005e70

080053f4 <memset>:
 80053f4:	4402      	add	r2, r0
 80053f6:	4603      	mov	r3, r0
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d100      	bne.n	80053fe <memset+0xa>
 80053fc:	4770      	bx	lr
 80053fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005402:	e7f9      	b.n	80053f8 <memset+0x4>

08005404 <siprintf>:
 8005404:	b40e      	push	{r1, r2, r3}
 8005406:	b500      	push	{lr}
 8005408:	b09c      	sub	sp, #112	; 0x70
 800540a:	ab1d      	add	r3, sp, #116	; 0x74
 800540c:	9002      	str	r0, [sp, #8]
 800540e:	9006      	str	r0, [sp, #24]
 8005410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005414:	4809      	ldr	r0, [pc, #36]	; (800543c <siprintf+0x38>)
 8005416:	9107      	str	r1, [sp, #28]
 8005418:	9104      	str	r1, [sp, #16]
 800541a:	4909      	ldr	r1, [pc, #36]	; (8005440 <siprintf+0x3c>)
 800541c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	6800      	ldr	r0, [r0, #0]
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	a902      	add	r1, sp, #8
 8005428:	f000 f868 	bl	80054fc <_svfiprintf_r>
 800542c:	9b02      	ldr	r3, [sp, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	b01c      	add	sp, #112	; 0x70
 8005434:	f85d eb04 	ldr.w	lr, [sp], #4
 8005438:	b003      	add	sp, #12
 800543a:	4770      	bx	lr
 800543c:	20000020 	.word	0x20000020
 8005440:	ffff0208 	.word	0xffff0208

08005444 <__ssputs_r>:
 8005444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	688e      	ldr	r6, [r1, #8]
 800544a:	429e      	cmp	r6, r3
 800544c:	4682      	mov	sl, r0
 800544e:	460c      	mov	r4, r1
 8005450:	4690      	mov	r8, r2
 8005452:	461f      	mov	r7, r3
 8005454:	d838      	bhi.n	80054c8 <__ssputs_r+0x84>
 8005456:	898a      	ldrh	r2, [r1, #12]
 8005458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800545c:	d032      	beq.n	80054c4 <__ssputs_r+0x80>
 800545e:	6825      	ldr	r5, [r4, #0]
 8005460:	6909      	ldr	r1, [r1, #16]
 8005462:	eba5 0901 	sub.w	r9, r5, r1
 8005466:	6965      	ldr	r5, [r4, #20]
 8005468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800546c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005470:	3301      	adds	r3, #1
 8005472:	444b      	add	r3, r9
 8005474:	106d      	asrs	r5, r5, #1
 8005476:	429d      	cmp	r5, r3
 8005478:	bf38      	it	cc
 800547a:	461d      	movcc	r5, r3
 800547c:	0553      	lsls	r3, r2, #21
 800547e:	d531      	bpl.n	80054e4 <__ssputs_r+0xa0>
 8005480:	4629      	mov	r1, r5
 8005482:	f000 fb63 	bl	8005b4c <_malloc_r>
 8005486:	4606      	mov	r6, r0
 8005488:	b950      	cbnz	r0, 80054a0 <__ssputs_r+0x5c>
 800548a:	230c      	movs	r3, #12
 800548c:	f8ca 3000 	str.w	r3, [sl]
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a0:	6921      	ldr	r1, [r4, #16]
 80054a2:	464a      	mov	r2, r9
 80054a4:	f000 fabe 	bl	8005a24 <memcpy>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b2:	81a3      	strh	r3, [r4, #12]
 80054b4:	6126      	str	r6, [r4, #16]
 80054b6:	6165      	str	r5, [r4, #20]
 80054b8:	444e      	add	r6, r9
 80054ba:	eba5 0509 	sub.w	r5, r5, r9
 80054be:	6026      	str	r6, [r4, #0]
 80054c0:	60a5      	str	r5, [r4, #8]
 80054c2:	463e      	mov	r6, r7
 80054c4:	42be      	cmp	r6, r7
 80054c6:	d900      	bls.n	80054ca <__ssputs_r+0x86>
 80054c8:	463e      	mov	r6, r7
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	4632      	mov	r2, r6
 80054ce:	4641      	mov	r1, r8
 80054d0:	f000 fab6 	bl	8005a40 <memmove>
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	1b9b      	subs	r3, r3, r6
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	4433      	add	r3, r6
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7db      	b.n	800549c <__ssputs_r+0x58>
 80054e4:	462a      	mov	r2, r5
 80054e6:	f000 fba5 	bl	8005c34 <_realloc_r>
 80054ea:	4606      	mov	r6, r0
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d1e1      	bne.n	80054b4 <__ssputs_r+0x70>
 80054f0:	6921      	ldr	r1, [r4, #16]
 80054f2:	4650      	mov	r0, sl
 80054f4:	f000 fabe 	bl	8005a74 <_free_r>
 80054f8:	e7c7      	b.n	800548a <__ssputs_r+0x46>
	...

080054fc <_svfiprintf_r>:
 80054fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	4698      	mov	r8, r3
 8005502:	898b      	ldrh	r3, [r1, #12]
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	b09d      	sub	sp, #116	; 0x74
 8005508:	4607      	mov	r7, r0
 800550a:	460d      	mov	r5, r1
 800550c:	4614      	mov	r4, r2
 800550e:	d50e      	bpl.n	800552e <_svfiprintf_r+0x32>
 8005510:	690b      	ldr	r3, [r1, #16]
 8005512:	b963      	cbnz	r3, 800552e <_svfiprintf_r+0x32>
 8005514:	2140      	movs	r1, #64	; 0x40
 8005516:	f000 fb19 	bl	8005b4c <_malloc_r>
 800551a:	6028      	str	r0, [r5, #0]
 800551c:	6128      	str	r0, [r5, #16]
 800551e:	b920      	cbnz	r0, 800552a <_svfiprintf_r+0x2e>
 8005520:	230c      	movs	r3, #12
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	f04f 30ff 	mov.w	r0, #4294967295
 8005528:	e0d1      	b.n	80056ce <_svfiprintf_r+0x1d2>
 800552a:	2340      	movs	r3, #64	; 0x40
 800552c:	616b      	str	r3, [r5, #20]
 800552e:	2300      	movs	r3, #0
 8005530:	9309      	str	r3, [sp, #36]	; 0x24
 8005532:	2320      	movs	r3, #32
 8005534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005538:	f8cd 800c 	str.w	r8, [sp, #12]
 800553c:	2330      	movs	r3, #48	; 0x30
 800553e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056e8 <_svfiprintf_r+0x1ec>
 8005542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005546:	f04f 0901 	mov.w	r9, #1
 800554a:	4623      	mov	r3, r4
 800554c:	469a      	mov	sl, r3
 800554e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005552:	b10a      	cbz	r2, 8005558 <_svfiprintf_r+0x5c>
 8005554:	2a25      	cmp	r2, #37	; 0x25
 8005556:	d1f9      	bne.n	800554c <_svfiprintf_r+0x50>
 8005558:	ebba 0b04 	subs.w	fp, sl, r4
 800555c:	d00b      	beq.n	8005576 <_svfiprintf_r+0x7a>
 800555e:	465b      	mov	r3, fp
 8005560:	4622      	mov	r2, r4
 8005562:	4629      	mov	r1, r5
 8005564:	4638      	mov	r0, r7
 8005566:	f7ff ff6d 	bl	8005444 <__ssputs_r>
 800556a:	3001      	adds	r0, #1
 800556c:	f000 80aa 	beq.w	80056c4 <_svfiprintf_r+0x1c8>
 8005570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005572:	445a      	add	r2, fp
 8005574:	9209      	str	r2, [sp, #36]	; 0x24
 8005576:	f89a 3000 	ldrb.w	r3, [sl]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a2 	beq.w	80056c4 <_svfiprintf_r+0x1c8>
 8005580:	2300      	movs	r3, #0
 8005582:	f04f 32ff 	mov.w	r2, #4294967295
 8005586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800558a:	f10a 0a01 	add.w	sl, sl, #1
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	9307      	str	r3, [sp, #28]
 8005592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005596:	931a      	str	r3, [sp, #104]	; 0x68
 8005598:	4654      	mov	r4, sl
 800559a:	2205      	movs	r2, #5
 800559c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a0:	4851      	ldr	r0, [pc, #324]	; (80056e8 <_svfiprintf_r+0x1ec>)
 80055a2:	f7fa fe3d 	bl	8000220 <memchr>
 80055a6:	9a04      	ldr	r2, [sp, #16]
 80055a8:	b9d8      	cbnz	r0, 80055e2 <_svfiprintf_r+0xe6>
 80055aa:	06d0      	lsls	r0, r2, #27
 80055ac:	bf44      	itt	mi
 80055ae:	2320      	movmi	r3, #32
 80055b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b4:	0711      	lsls	r1, r2, #28
 80055b6:	bf44      	itt	mi
 80055b8:	232b      	movmi	r3, #43	; 0x2b
 80055ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055be:	f89a 3000 	ldrb.w	r3, [sl]
 80055c2:	2b2a      	cmp	r3, #42	; 0x2a
 80055c4:	d015      	beq.n	80055f2 <_svfiprintf_r+0xf6>
 80055c6:	9a07      	ldr	r2, [sp, #28]
 80055c8:	4654      	mov	r4, sl
 80055ca:	2000      	movs	r0, #0
 80055cc:	f04f 0c0a 	mov.w	ip, #10
 80055d0:	4621      	mov	r1, r4
 80055d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d6:	3b30      	subs	r3, #48	; 0x30
 80055d8:	2b09      	cmp	r3, #9
 80055da:	d94e      	bls.n	800567a <_svfiprintf_r+0x17e>
 80055dc:	b1b0      	cbz	r0, 800560c <_svfiprintf_r+0x110>
 80055de:	9207      	str	r2, [sp, #28]
 80055e0:	e014      	b.n	800560c <_svfiprintf_r+0x110>
 80055e2:	eba0 0308 	sub.w	r3, r0, r8
 80055e6:	fa09 f303 	lsl.w	r3, r9, r3
 80055ea:	4313      	orrs	r3, r2
 80055ec:	9304      	str	r3, [sp, #16]
 80055ee:	46a2      	mov	sl, r4
 80055f0:	e7d2      	b.n	8005598 <_svfiprintf_r+0x9c>
 80055f2:	9b03      	ldr	r3, [sp, #12]
 80055f4:	1d19      	adds	r1, r3, #4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	9103      	str	r1, [sp, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bfbb      	ittet	lt
 80055fe:	425b      	neglt	r3, r3
 8005600:	f042 0202 	orrlt.w	r2, r2, #2
 8005604:	9307      	strge	r3, [sp, #28]
 8005606:	9307      	strlt	r3, [sp, #28]
 8005608:	bfb8      	it	lt
 800560a:	9204      	strlt	r2, [sp, #16]
 800560c:	7823      	ldrb	r3, [r4, #0]
 800560e:	2b2e      	cmp	r3, #46	; 0x2e
 8005610:	d10c      	bne.n	800562c <_svfiprintf_r+0x130>
 8005612:	7863      	ldrb	r3, [r4, #1]
 8005614:	2b2a      	cmp	r3, #42	; 0x2a
 8005616:	d135      	bne.n	8005684 <_svfiprintf_r+0x188>
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	1d1a      	adds	r2, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	9203      	str	r2, [sp, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	bfb8      	it	lt
 8005624:	f04f 33ff 	movlt.w	r3, #4294967295
 8005628:	3402      	adds	r4, #2
 800562a:	9305      	str	r3, [sp, #20]
 800562c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056f8 <_svfiprintf_r+0x1fc>
 8005630:	7821      	ldrb	r1, [r4, #0]
 8005632:	2203      	movs	r2, #3
 8005634:	4650      	mov	r0, sl
 8005636:	f7fa fdf3 	bl	8000220 <memchr>
 800563a:	b140      	cbz	r0, 800564e <_svfiprintf_r+0x152>
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	eba0 000a 	sub.w	r0, r0, sl
 8005642:	fa03 f000 	lsl.w	r0, r3, r0
 8005646:	9b04      	ldr	r3, [sp, #16]
 8005648:	4303      	orrs	r3, r0
 800564a:	3401      	adds	r4, #1
 800564c:	9304      	str	r3, [sp, #16]
 800564e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005652:	4826      	ldr	r0, [pc, #152]	; (80056ec <_svfiprintf_r+0x1f0>)
 8005654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005658:	2206      	movs	r2, #6
 800565a:	f7fa fde1 	bl	8000220 <memchr>
 800565e:	2800      	cmp	r0, #0
 8005660:	d038      	beq.n	80056d4 <_svfiprintf_r+0x1d8>
 8005662:	4b23      	ldr	r3, [pc, #140]	; (80056f0 <_svfiprintf_r+0x1f4>)
 8005664:	bb1b      	cbnz	r3, 80056ae <_svfiprintf_r+0x1b2>
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	3307      	adds	r3, #7
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	3308      	adds	r3, #8
 8005670:	9303      	str	r3, [sp, #12]
 8005672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005674:	4433      	add	r3, r6
 8005676:	9309      	str	r3, [sp, #36]	; 0x24
 8005678:	e767      	b.n	800554a <_svfiprintf_r+0x4e>
 800567a:	fb0c 3202 	mla	r2, ip, r2, r3
 800567e:	460c      	mov	r4, r1
 8005680:	2001      	movs	r0, #1
 8005682:	e7a5      	b.n	80055d0 <_svfiprintf_r+0xd4>
 8005684:	2300      	movs	r3, #0
 8005686:	3401      	adds	r4, #1
 8005688:	9305      	str	r3, [sp, #20]
 800568a:	4619      	mov	r1, r3
 800568c:	f04f 0c0a 	mov.w	ip, #10
 8005690:	4620      	mov	r0, r4
 8005692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005696:	3a30      	subs	r2, #48	; 0x30
 8005698:	2a09      	cmp	r2, #9
 800569a:	d903      	bls.n	80056a4 <_svfiprintf_r+0x1a8>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0c5      	beq.n	800562c <_svfiprintf_r+0x130>
 80056a0:	9105      	str	r1, [sp, #20]
 80056a2:	e7c3      	b.n	800562c <_svfiprintf_r+0x130>
 80056a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a8:	4604      	mov	r4, r0
 80056aa:	2301      	movs	r3, #1
 80056ac:	e7f0      	b.n	8005690 <_svfiprintf_r+0x194>
 80056ae:	ab03      	add	r3, sp, #12
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	462a      	mov	r2, r5
 80056b4:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <_svfiprintf_r+0x1f8>)
 80056b6:	a904      	add	r1, sp, #16
 80056b8:	4638      	mov	r0, r7
 80056ba:	f3af 8000 	nop.w
 80056be:	1c42      	adds	r2, r0, #1
 80056c0:	4606      	mov	r6, r0
 80056c2:	d1d6      	bne.n	8005672 <_svfiprintf_r+0x176>
 80056c4:	89ab      	ldrh	r3, [r5, #12]
 80056c6:	065b      	lsls	r3, r3, #25
 80056c8:	f53f af2c 	bmi.w	8005524 <_svfiprintf_r+0x28>
 80056cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056ce:	b01d      	add	sp, #116	; 0x74
 80056d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d4:	ab03      	add	r3, sp, #12
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	462a      	mov	r2, r5
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <_svfiprintf_r+0x1f8>)
 80056dc:	a904      	add	r1, sp, #16
 80056de:	4638      	mov	r0, r7
 80056e0:	f000 f87a 	bl	80057d8 <_printf_i>
 80056e4:	e7eb      	b.n	80056be <_svfiprintf_r+0x1c2>
 80056e6:	bf00      	nop
 80056e8:	08005e30 	.word	0x08005e30
 80056ec:	08005e3a 	.word	0x08005e3a
 80056f0:	00000000 	.word	0x00000000
 80056f4:	08005445 	.word	0x08005445
 80056f8:	08005e36 	.word	0x08005e36

080056fc <_printf_common>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	4616      	mov	r6, r2
 8005702:	4699      	mov	r9, r3
 8005704:	688a      	ldr	r2, [r1, #8]
 8005706:	690b      	ldr	r3, [r1, #16]
 8005708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800570c:	4293      	cmp	r3, r2
 800570e:	bfb8      	it	lt
 8005710:	4613      	movlt	r3, r2
 8005712:	6033      	str	r3, [r6, #0]
 8005714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005718:	4607      	mov	r7, r0
 800571a:	460c      	mov	r4, r1
 800571c:	b10a      	cbz	r2, 8005722 <_printf_common+0x26>
 800571e:	3301      	adds	r3, #1
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	0699      	lsls	r1, r3, #26
 8005726:	bf42      	ittt	mi
 8005728:	6833      	ldrmi	r3, [r6, #0]
 800572a:	3302      	addmi	r3, #2
 800572c:	6033      	strmi	r3, [r6, #0]
 800572e:	6825      	ldr	r5, [r4, #0]
 8005730:	f015 0506 	ands.w	r5, r5, #6
 8005734:	d106      	bne.n	8005744 <_printf_common+0x48>
 8005736:	f104 0a19 	add.w	sl, r4, #25
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	6832      	ldr	r2, [r6, #0]
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	42ab      	cmp	r3, r5
 8005742:	dc26      	bgt.n	8005792 <_printf_common+0x96>
 8005744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005748:	1e13      	subs	r3, r2, #0
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	bf18      	it	ne
 800574e:	2301      	movne	r3, #1
 8005750:	0692      	lsls	r2, r2, #26
 8005752:	d42b      	bmi.n	80057ac <_printf_common+0xb0>
 8005754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005758:	4649      	mov	r1, r9
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d01e      	beq.n	80057a0 <_printf_common+0xa4>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	68e5      	ldr	r5, [r4, #12]
 8005766:	6832      	ldr	r2, [r6, #0]
 8005768:	f003 0306 	and.w	r3, r3, #6
 800576c:	2b04      	cmp	r3, #4
 800576e:	bf08      	it	eq
 8005770:	1aad      	subeq	r5, r5, r2
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	6922      	ldr	r2, [r4, #16]
 8005776:	bf0c      	ite	eq
 8005778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800577c:	2500      	movne	r5, #0
 800577e:	4293      	cmp	r3, r2
 8005780:	bfc4      	itt	gt
 8005782:	1a9b      	subgt	r3, r3, r2
 8005784:	18ed      	addgt	r5, r5, r3
 8005786:	2600      	movs	r6, #0
 8005788:	341a      	adds	r4, #26
 800578a:	42b5      	cmp	r5, r6
 800578c:	d11a      	bne.n	80057c4 <_printf_common+0xc8>
 800578e:	2000      	movs	r0, #0
 8005790:	e008      	b.n	80057a4 <_printf_common+0xa8>
 8005792:	2301      	movs	r3, #1
 8005794:	4652      	mov	r2, sl
 8005796:	4649      	mov	r1, r9
 8005798:	4638      	mov	r0, r7
 800579a:	47c0      	blx	r8
 800579c:	3001      	adds	r0, #1
 800579e:	d103      	bne.n	80057a8 <_printf_common+0xac>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	3501      	adds	r5, #1
 80057aa:	e7c6      	b.n	800573a <_printf_common+0x3e>
 80057ac:	18e1      	adds	r1, r4, r3
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	2030      	movs	r0, #48	; 0x30
 80057b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b6:	4422      	add	r2, r4
 80057b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057c0:	3302      	adds	r3, #2
 80057c2:	e7c7      	b.n	8005754 <_printf_common+0x58>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4622      	mov	r2, r4
 80057c8:	4649      	mov	r1, r9
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0e6      	beq.n	80057a0 <_printf_common+0xa4>
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7d9      	b.n	800578a <_printf_common+0x8e>
	...

080057d8 <_printf_i>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	7e0f      	ldrb	r7, [r1, #24]
 80057de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057e0:	2f78      	cmp	r7, #120	; 0x78
 80057e2:	4691      	mov	r9, r2
 80057e4:	4680      	mov	r8, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	469a      	mov	sl, r3
 80057ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ee:	d807      	bhi.n	8005800 <_printf_i+0x28>
 80057f0:	2f62      	cmp	r7, #98	; 0x62
 80057f2:	d80a      	bhi.n	800580a <_printf_i+0x32>
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	f000 80d8 	beq.w	80059aa <_printf_i+0x1d2>
 80057fa:	2f58      	cmp	r7, #88	; 0x58
 80057fc:	f000 80a3 	beq.w	8005946 <_printf_i+0x16e>
 8005800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005808:	e03a      	b.n	8005880 <_printf_i+0xa8>
 800580a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580e:	2b15      	cmp	r3, #21
 8005810:	d8f6      	bhi.n	8005800 <_printf_i+0x28>
 8005812:	a101      	add	r1, pc, #4	; (adr r1, 8005818 <_printf_i+0x40>)
 8005814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005818:	08005871 	.word	0x08005871
 800581c:	08005885 	.word	0x08005885
 8005820:	08005801 	.word	0x08005801
 8005824:	08005801 	.word	0x08005801
 8005828:	08005801 	.word	0x08005801
 800582c:	08005801 	.word	0x08005801
 8005830:	08005885 	.word	0x08005885
 8005834:	08005801 	.word	0x08005801
 8005838:	08005801 	.word	0x08005801
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	08005991 	.word	0x08005991
 8005848:	080058b5 	.word	0x080058b5
 800584c:	08005973 	.word	0x08005973
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	080059b3 	.word	0x080059b3
 800585c:	08005801 	.word	0x08005801
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	0800597b 	.word	0x0800597b
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	602a      	str	r2, [r5, #0]
 8005878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005880:	2301      	movs	r3, #1
 8005882:	e0a3      	b.n	80059cc <_printf_i+0x1f4>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	6829      	ldr	r1, [r5, #0]
 8005888:	0606      	lsls	r6, r0, #24
 800588a:	f101 0304 	add.w	r3, r1, #4
 800588e:	d50a      	bpl.n	80058a6 <_printf_i+0xce>
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	2e00      	cmp	r6, #0
 8005896:	da03      	bge.n	80058a0 <_printf_i+0xc8>
 8005898:	232d      	movs	r3, #45	; 0x2d
 800589a:	4276      	negs	r6, r6
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	485e      	ldr	r0, [pc, #376]	; (8005a1c <_printf_i+0x244>)
 80058a2:	230a      	movs	r3, #10
 80058a4:	e019      	b.n	80058da <_printf_i+0x102>
 80058a6:	680e      	ldr	r6, [r1, #0]
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ae:	bf18      	it	ne
 80058b0:	b236      	sxthne	r6, r6
 80058b2:	e7ef      	b.n	8005894 <_printf_i+0xbc>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	1d19      	adds	r1, r3, #4
 80058ba:	6029      	str	r1, [r5, #0]
 80058bc:	0601      	lsls	r1, r0, #24
 80058be:	d501      	bpl.n	80058c4 <_printf_i+0xec>
 80058c0:	681e      	ldr	r6, [r3, #0]
 80058c2:	e002      	b.n	80058ca <_printf_i+0xf2>
 80058c4:	0646      	lsls	r6, r0, #25
 80058c6:	d5fb      	bpl.n	80058c0 <_printf_i+0xe8>
 80058c8:	881e      	ldrh	r6, [r3, #0]
 80058ca:	4854      	ldr	r0, [pc, #336]	; (8005a1c <_printf_i+0x244>)
 80058cc:	2f6f      	cmp	r7, #111	; 0x6f
 80058ce:	bf0c      	ite	eq
 80058d0:	2308      	moveq	r3, #8
 80058d2:	230a      	movne	r3, #10
 80058d4:	2100      	movs	r1, #0
 80058d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058da:	6865      	ldr	r5, [r4, #4]
 80058dc:	60a5      	str	r5, [r4, #8]
 80058de:	2d00      	cmp	r5, #0
 80058e0:	bfa2      	ittt	ge
 80058e2:	6821      	ldrge	r1, [r4, #0]
 80058e4:	f021 0104 	bicge.w	r1, r1, #4
 80058e8:	6021      	strge	r1, [r4, #0]
 80058ea:	b90e      	cbnz	r6, 80058f0 <_printf_i+0x118>
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	d04d      	beq.n	800598c <_printf_i+0x1b4>
 80058f0:	4615      	mov	r5, r2
 80058f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058f6:	fb03 6711 	mls	r7, r3, r1, r6
 80058fa:	5dc7      	ldrb	r7, [r0, r7]
 80058fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005900:	4637      	mov	r7, r6
 8005902:	42bb      	cmp	r3, r7
 8005904:	460e      	mov	r6, r1
 8005906:	d9f4      	bls.n	80058f2 <_printf_i+0x11a>
 8005908:	2b08      	cmp	r3, #8
 800590a:	d10b      	bne.n	8005924 <_printf_i+0x14c>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07de      	lsls	r6, r3, #31
 8005910:	d508      	bpl.n	8005924 <_printf_i+0x14c>
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	6861      	ldr	r1, [r4, #4]
 8005916:	4299      	cmp	r1, r3
 8005918:	bfde      	ittt	le
 800591a:	2330      	movle	r3, #48	; 0x30
 800591c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005924:	1b52      	subs	r2, r2, r5
 8005926:	6122      	str	r2, [r4, #16]
 8005928:	f8cd a000 	str.w	sl, [sp]
 800592c:	464b      	mov	r3, r9
 800592e:	aa03      	add	r2, sp, #12
 8005930:	4621      	mov	r1, r4
 8005932:	4640      	mov	r0, r8
 8005934:	f7ff fee2 	bl	80056fc <_printf_common>
 8005938:	3001      	adds	r0, #1
 800593a:	d14c      	bne.n	80059d6 <_printf_i+0x1fe>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	b004      	add	sp, #16
 8005942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005946:	4835      	ldr	r0, [pc, #212]	; (8005a1c <_printf_i+0x244>)
 8005948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800594c:	6829      	ldr	r1, [r5, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f851 6b04 	ldr.w	r6, [r1], #4
 8005954:	6029      	str	r1, [r5, #0]
 8005956:	061d      	lsls	r5, r3, #24
 8005958:	d514      	bpl.n	8005984 <_printf_i+0x1ac>
 800595a:	07df      	lsls	r7, r3, #31
 800595c:	bf44      	itt	mi
 800595e:	f043 0320 	orrmi.w	r3, r3, #32
 8005962:	6023      	strmi	r3, [r4, #0]
 8005964:	b91e      	cbnz	r6, 800596e <_printf_i+0x196>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f023 0320 	bic.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	2310      	movs	r3, #16
 8005970:	e7b0      	b.n	80058d4 <_printf_i+0xfc>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	2378      	movs	r3, #120	; 0x78
 800597c:	4828      	ldr	r0, [pc, #160]	; (8005a20 <_printf_i+0x248>)
 800597e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005982:	e7e3      	b.n	800594c <_printf_i+0x174>
 8005984:	0659      	lsls	r1, r3, #25
 8005986:	bf48      	it	mi
 8005988:	b2b6      	uxthmi	r6, r6
 800598a:	e7e6      	b.n	800595a <_printf_i+0x182>
 800598c:	4615      	mov	r5, r2
 800598e:	e7bb      	b.n	8005908 <_printf_i+0x130>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	6826      	ldr	r6, [r4, #0]
 8005994:	6961      	ldr	r1, [r4, #20]
 8005996:	1d18      	adds	r0, r3, #4
 8005998:	6028      	str	r0, [r5, #0]
 800599a:	0635      	lsls	r5, r6, #24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0x1cc>
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e002      	b.n	80059aa <_printf_i+0x1d2>
 80059a4:	0670      	lsls	r0, r6, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0x1c8>
 80059a8:	8019      	strh	r1, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	4615      	mov	r5, r2
 80059b0:	e7ba      	b.n	8005928 <_printf_i+0x150>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	602a      	str	r2, [r5, #0]
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	2100      	movs	r1, #0
 80059be:	4628      	mov	r0, r5
 80059c0:	f7fa fc2e 	bl	8000220 <memchr>
 80059c4:	b108      	cbz	r0, 80059ca <_printf_i+0x1f2>
 80059c6:	1b40      	subs	r0, r0, r5
 80059c8:	6060      	str	r0, [r4, #4]
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	2300      	movs	r3, #0
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	e7a8      	b.n	8005928 <_printf_i+0x150>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	462a      	mov	r2, r5
 80059da:	4649      	mov	r1, r9
 80059dc:	4640      	mov	r0, r8
 80059de:	47d0      	blx	sl
 80059e0:	3001      	adds	r0, #1
 80059e2:	d0ab      	beq.n	800593c <_printf_i+0x164>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	079b      	lsls	r3, r3, #30
 80059e8:	d413      	bmi.n	8005a12 <_printf_i+0x23a>
 80059ea:	68e0      	ldr	r0, [r4, #12]
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	4298      	cmp	r0, r3
 80059f0:	bfb8      	it	lt
 80059f2:	4618      	movlt	r0, r3
 80059f4:	e7a4      	b.n	8005940 <_printf_i+0x168>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4632      	mov	r2, r6
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d09b      	beq.n	800593c <_printf_i+0x164>
 8005a04:	3501      	adds	r5, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dcf2      	bgt.n	80059f6 <_printf_i+0x21e>
 8005a10:	e7eb      	b.n	80059ea <_printf_i+0x212>
 8005a12:	2500      	movs	r5, #0
 8005a14:	f104 0619 	add.w	r6, r4, #25
 8005a18:	e7f5      	b.n	8005a06 <_printf_i+0x22e>
 8005a1a:	bf00      	nop
 8005a1c:	08005e41 	.word	0x08005e41
 8005a20:	08005e52 	.word	0x08005e52

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3a:	4291      	cmp	r1, r2
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <memmove>:
 8005a40:	4288      	cmp	r0, r1
 8005a42:	b510      	push	{r4, lr}
 8005a44:	eb01 0402 	add.w	r4, r1, r2
 8005a48:	d902      	bls.n	8005a50 <memmove+0x10>
 8005a4a:	4284      	cmp	r4, r0
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	d807      	bhi.n	8005a60 <memmove+0x20>
 8005a50:	1e43      	subs	r3, r0, #1
 8005a52:	42a1      	cmp	r1, r4
 8005a54:	d008      	beq.n	8005a68 <memmove+0x28>
 8005a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a5e:	e7f8      	b.n	8005a52 <memmove+0x12>
 8005a60:	4402      	add	r2, r0
 8005a62:	4601      	mov	r1, r0
 8005a64:	428a      	cmp	r2, r1
 8005a66:	d100      	bne.n	8005a6a <memmove+0x2a>
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a72:	e7f7      	b.n	8005a64 <memmove+0x24>

08005a74 <_free_r>:
 8005a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a76:	2900      	cmp	r1, #0
 8005a78:	d044      	beq.n	8005b04 <_free_r+0x90>
 8005a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7e:	9001      	str	r0, [sp, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f1a1 0404 	sub.w	r4, r1, #4
 8005a86:	bfb8      	it	lt
 8005a88:	18e4      	addlt	r4, r4, r3
 8005a8a:	f000 f913 	bl	8005cb4 <__malloc_lock>
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	; (8005b08 <_free_r+0x94>)
 8005a90:	9801      	ldr	r0, [sp, #4]
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	b933      	cbnz	r3, 8005aa4 <_free_r+0x30>
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	6014      	str	r4, [r2, #0]
 8005a9a:	b003      	add	sp, #12
 8005a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa0:	f000 b90e 	b.w	8005cc0 <__malloc_unlock>
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	d908      	bls.n	8005aba <_free_r+0x46>
 8005aa8:	6825      	ldr	r5, [r4, #0]
 8005aaa:	1961      	adds	r1, r4, r5
 8005aac:	428b      	cmp	r3, r1
 8005aae:	bf01      	itttt	eq
 8005ab0:	6819      	ldreq	r1, [r3, #0]
 8005ab2:	685b      	ldreq	r3, [r3, #4]
 8005ab4:	1949      	addeq	r1, r1, r5
 8005ab6:	6021      	streq	r1, [r4, #0]
 8005ab8:	e7ed      	b.n	8005a96 <_free_r+0x22>
 8005aba:	461a      	mov	r2, r3
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b10b      	cbz	r3, 8005ac4 <_free_r+0x50>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d9fa      	bls.n	8005aba <_free_r+0x46>
 8005ac4:	6811      	ldr	r1, [r2, #0]
 8005ac6:	1855      	adds	r5, r2, r1
 8005ac8:	42a5      	cmp	r5, r4
 8005aca:	d10b      	bne.n	8005ae4 <_free_r+0x70>
 8005acc:	6824      	ldr	r4, [r4, #0]
 8005ace:	4421      	add	r1, r4
 8005ad0:	1854      	adds	r4, r2, r1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	6011      	str	r1, [r2, #0]
 8005ad6:	d1e0      	bne.n	8005a9a <_free_r+0x26>
 8005ad8:	681c      	ldr	r4, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	4421      	add	r1, r4
 8005ae0:	6011      	str	r1, [r2, #0]
 8005ae2:	e7da      	b.n	8005a9a <_free_r+0x26>
 8005ae4:	d902      	bls.n	8005aec <_free_r+0x78>
 8005ae6:	230c      	movs	r3, #12
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	e7d6      	b.n	8005a9a <_free_r+0x26>
 8005aec:	6825      	ldr	r5, [r4, #0]
 8005aee:	1961      	adds	r1, r4, r5
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf04      	itt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	6063      	str	r3, [r4, #4]
 8005afa:	bf04      	itt	eq
 8005afc:	1949      	addeq	r1, r1, r5
 8005afe:	6021      	streq	r1, [r4, #0]
 8005b00:	6054      	str	r4, [r2, #4]
 8005b02:	e7ca      	b.n	8005a9a <_free_r+0x26>
 8005b04:	b003      	add	sp, #12
 8005b06:	bd30      	pop	{r4, r5, pc}
 8005b08:	20000318 	.word	0x20000318

08005b0c <sbrk_aligned>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4e0e      	ldr	r6, [pc, #56]	; (8005b48 <sbrk_aligned+0x3c>)
 8005b10:	460c      	mov	r4, r1
 8005b12:	6831      	ldr	r1, [r6, #0]
 8005b14:	4605      	mov	r5, r0
 8005b16:	b911      	cbnz	r1, 8005b1e <sbrk_aligned+0x12>
 8005b18:	f000 f8bc 	bl	8005c94 <_sbrk_r>
 8005b1c:	6030      	str	r0, [r6, #0]
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f8b7 	bl	8005c94 <_sbrk_r>
 8005b26:	1c43      	adds	r3, r0, #1
 8005b28:	d00a      	beq.n	8005b40 <sbrk_aligned+0x34>
 8005b2a:	1cc4      	adds	r4, r0, #3
 8005b2c:	f024 0403 	bic.w	r4, r4, #3
 8005b30:	42a0      	cmp	r0, r4
 8005b32:	d007      	beq.n	8005b44 <sbrk_aligned+0x38>
 8005b34:	1a21      	subs	r1, r4, r0
 8005b36:	4628      	mov	r0, r5
 8005b38:	f000 f8ac 	bl	8005c94 <_sbrk_r>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d101      	bne.n	8005b44 <sbrk_aligned+0x38>
 8005b40:	f04f 34ff 	mov.w	r4, #4294967295
 8005b44:	4620      	mov	r0, r4
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	2000031c 	.word	0x2000031c

08005b4c <_malloc_r>:
 8005b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	1ccd      	adds	r5, r1, #3
 8005b52:	f025 0503 	bic.w	r5, r5, #3
 8005b56:	3508      	adds	r5, #8
 8005b58:	2d0c      	cmp	r5, #12
 8005b5a:	bf38      	it	cc
 8005b5c:	250c      	movcc	r5, #12
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	4607      	mov	r7, r0
 8005b62:	db01      	blt.n	8005b68 <_malloc_r+0x1c>
 8005b64:	42a9      	cmp	r1, r5
 8005b66:	d905      	bls.n	8005b74 <_malloc_r+0x28>
 8005b68:	230c      	movs	r3, #12
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	4630      	mov	r0, r6
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b74:	4e2e      	ldr	r6, [pc, #184]	; (8005c30 <_malloc_r+0xe4>)
 8005b76:	f000 f89d 	bl	8005cb4 <__malloc_lock>
 8005b7a:	6833      	ldr	r3, [r6, #0]
 8005b7c:	461c      	mov	r4, r3
 8005b7e:	bb34      	cbnz	r4, 8005bce <_malloc_r+0x82>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4638      	mov	r0, r7
 8005b84:	f7ff ffc2 	bl	8005b0c <sbrk_aligned>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	d14d      	bne.n	8005c2a <_malloc_r+0xde>
 8005b8e:	6834      	ldr	r4, [r6, #0]
 8005b90:	4626      	mov	r6, r4
 8005b92:	2e00      	cmp	r6, #0
 8005b94:	d140      	bne.n	8005c18 <_malloc_r+0xcc>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	4631      	mov	r1, r6
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	eb04 0803 	add.w	r8, r4, r3
 8005ba0:	f000 f878 	bl	8005c94 <_sbrk_r>
 8005ba4:	4580      	cmp	r8, r0
 8005ba6:	d13a      	bne.n	8005c1e <_malloc_r+0xd2>
 8005ba8:	6821      	ldr	r1, [r4, #0]
 8005baa:	3503      	adds	r5, #3
 8005bac:	1a6d      	subs	r5, r5, r1
 8005bae:	f025 0503 	bic.w	r5, r5, #3
 8005bb2:	3508      	adds	r5, #8
 8005bb4:	2d0c      	cmp	r5, #12
 8005bb6:	bf38      	it	cc
 8005bb8:	250c      	movcc	r5, #12
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f7ff ffa5 	bl	8005b0c <sbrk_aligned>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d02b      	beq.n	8005c1e <_malloc_r+0xd2>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	442b      	add	r3, r5
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	e00e      	b.n	8005bec <_malloc_r+0xa0>
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	1b52      	subs	r2, r2, r5
 8005bd2:	d41e      	bmi.n	8005c12 <_malloc_r+0xc6>
 8005bd4:	2a0b      	cmp	r2, #11
 8005bd6:	d916      	bls.n	8005c06 <_malloc_r+0xba>
 8005bd8:	1961      	adds	r1, r4, r5
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	6025      	str	r5, [r4, #0]
 8005bde:	bf18      	it	ne
 8005be0:	6059      	strne	r1, [r3, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	bf08      	it	eq
 8005be6:	6031      	streq	r1, [r6, #0]
 8005be8:	5162      	str	r2, [r4, r5]
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	4638      	mov	r0, r7
 8005bee:	f104 060b 	add.w	r6, r4, #11
 8005bf2:	f000 f865 	bl	8005cc0 <__malloc_unlock>
 8005bf6:	f026 0607 	bic.w	r6, r6, #7
 8005bfa:	1d23      	adds	r3, r4, #4
 8005bfc:	1af2      	subs	r2, r6, r3
 8005bfe:	d0b6      	beq.n	8005b6e <_malloc_r+0x22>
 8005c00:	1b9b      	subs	r3, r3, r6
 8005c02:	50a3      	str	r3, [r4, r2]
 8005c04:	e7b3      	b.n	8005b6e <_malloc_r+0x22>
 8005c06:	6862      	ldr	r2, [r4, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	bf0c      	ite	eq
 8005c0c:	6032      	streq	r2, [r6, #0]
 8005c0e:	605a      	strne	r2, [r3, #4]
 8005c10:	e7ec      	b.n	8005bec <_malloc_r+0xa0>
 8005c12:	4623      	mov	r3, r4
 8005c14:	6864      	ldr	r4, [r4, #4]
 8005c16:	e7b2      	b.n	8005b7e <_malloc_r+0x32>
 8005c18:	4634      	mov	r4, r6
 8005c1a:	6876      	ldr	r6, [r6, #4]
 8005c1c:	e7b9      	b.n	8005b92 <_malloc_r+0x46>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	603b      	str	r3, [r7, #0]
 8005c22:	4638      	mov	r0, r7
 8005c24:	f000 f84c 	bl	8005cc0 <__malloc_unlock>
 8005c28:	e7a1      	b.n	8005b6e <_malloc_r+0x22>
 8005c2a:	6025      	str	r5, [r4, #0]
 8005c2c:	e7de      	b.n	8005bec <_malloc_r+0xa0>
 8005c2e:	bf00      	nop
 8005c30:	20000318 	.word	0x20000318

08005c34 <_realloc_r>:
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c38:	4680      	mov	r8, r0
 8005c3a:	4614      	mov	r4, r2
 8005c3c:	460e      	mov	r6, r1
 8005c3e:	b921      	cbnz	r1, 8005c4a <_realloc_r+0x16>
 8005c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	4611      	mov	r1, r2
 8005c46:	f7ff bf81 	b.w	8005b4c <_malloc_r>
 8005c4a:	b92a      	cbnz	r2, 8005c58 <_realloc_r+0x24>
 8005c4c:	f7ff ff12 	bl	8005a74 <_free_r>
 8005c50:	4625      	mov	r5, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	f000 f838 	bl	8005ccc <_malloc_usable_size_r>
 8005c5c:	4284      	cmp	r4, r0
 8005c5e:	4607      	mov	r7, r0
 8005c60:	d802      	bhi.n	8005c68 <_realloc_r+0x34>
 8005c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c66:	d812      	bhi.n	8005c8e <_realloc_r+0x5a>
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f7ff ff6e 	bl	8005b4c <_malloc_r>
 8005c70:	4605      	mov	r5, r0
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d0ed      	beq.n	8005c52 <_realloc_r+0x1e>
 8005c76:	42bc      	cmp	r4, r7
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	bf28      	it	cs
 8005c7e:	463a      	movcs	r2, r7
 8005c80:	f7ff fed0 	bl	8005a24 <memcpy>
 8005c84:	4631      	mov	r1, r6
 8005c86:	4640      	mov	r0, r8
 8005c88:	f7ff fef4 	bl	8005a74 <_free_r>
 8005c8c:	e7e1      	b.n	8005c52 <_realloc_r+0x1e>
 8005c8e:	4635      	mov	r5, r6
 8005c90:	e7df      	b.n	8005c52 <_realloc_r+0x1e>
	...

08005c94 <_sbrk_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	; (8005cb0 <_sbrk_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fb fa90 	bl	80011c4 <_sbrk>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_sbrk_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_sbrk_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20000320 	.word	0x20000320

08005cb4 <__malloc_lock>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__malloc_lock+0x8>)
 8005cb6:	f000 b811 	b.w	8005cdc <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20000324 	.word	0x20000324

08005cc0 <__malloc_unlock>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__malloc_unlock+0x8>)
 8005cc2:	f000 b80c 	b.w	8005cde <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20000324 	.word	0x20000324

08005ccc <_malloc_usable_size_r>:
 8005ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cd0:	1f18      	subs	r0, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bfbc      	itt	lt
 8005cd6:	580b      	ldrlt	r3, [r1, r0]
 8005cd8:	18c0      	addlt	r0, r0, r3
 8005cda:	4770      	bx	lr

08005cdc <__retarget_lock_acquire_recursive>:
 8005cdc:	4770      	bx	lr

08005cde <__retarget_lock_release_recursive>:
 8005cde:	4770      	bx	lr

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
